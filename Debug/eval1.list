
eval1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002130  08006f74  08006f74  00007f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a4  080090a4  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  080090a4  080090a4  0000a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090ac  080090ac  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090ac  080090ac  0000a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090b0  080090b0  0000a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080090b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f820  20000074  08009128  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f894  08009128  0000b894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b7c  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f31  00000000  00000000  0001dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00020b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e74  00000000  00000000  00021de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180bc  00000000  00000000  00022c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f92  00000000  00000000  0003ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096b01  00000000  00000000  00050ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e77a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005434  00000000  00000000  000e77e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ecc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f5c 	.word	0x08006f5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006f5c 	.word	0x08006f5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d52:	f000 fef1 	bl	8001b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d56:	f000 f867 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5a:	f000 f94d 	bl	8000ff8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d5e:	f000 f8cd 	bl	8000efc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d62:	f000 f8f9 	bl	8000f58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000d66:	4829      	ldr	r0, [pc, #164]	@ (8000e0c <main+0xc0>)
 8000d68:	f002 fc76 	bl	8003658 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d72:	4827      	ldr	r0, [pc, #156]	@ (8000e10 <main+0xc4>)
 8000d74:	f001 f9c4 	bl	8002100 <HAL_GPIO_WritePin>
  SSD1306_Init();
 8000d78:	f000 fab0 	bl	80012dc <SSD1306_Init>

  // Create the queue
  distanceQueue = xQueueCreate(DISTANCE_QUEUE_SIZE, sizeof(uint16_t));
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2102      	movs	r1, #2
 8000d80:	2001      	movs	r0, #1
 8000d82:	f003 f9cf 	bl	8004124 <xQueueGenericCreate>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a22      	ldr	r2, [pc, #136]	@ (8000e14 <main+0xc8>)
 8000d8a:	6013      	str	r3, [r2, #0]
  if (distanceQueue == NULL) {
 8000d8c:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <main+0xc8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <main+0x4c>
    // Handle queue creation failure
    Error_Handler();
 8000d94:	f000 fa9b 	bl	80012ce <Error_Handler>
  }

  status = xTaskCreate(task1_handler, "task 1", TASK_STACK_SIZE, NULL, 2, &task1_handle);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	2302      	movs	r3, #2
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	491c      	ldr	r1, [pc, #112]	@ (8000e18 <main+0xcc>)
 8000da8:	481c      	ldr	r0, [pc, #112]	@ (8000e1c <main+0xd0>)
 8000daa:	f003 fda5 	bl	80048f8 <xTaskCreate>
 8000dae:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d00b      	beq.n	8000dce <main+0x82>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dba:	f383 8811 	msr	BASEPRI, r3
 8000dbe:	f3bf 8f6f 	isb	sy
 8000dc2:	f3bf 8f4f 	dsb	sy
 8000dc6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	e7fd      	b.n	8000dca <main+0x7e>

  status = xTaskCreate(task2_handler, "task 2", TASK_STACK_SIZE, NULL, 1, &task2_handle);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	4911      	ldr	r1, [pc, #68]	@ (8000e20 <main+0xd4>)
 8000ddc:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <main+0xd8>)
 8000dde:	f003 fd8b 	bl	80048f8 <xTaskCreate>
 8000de2:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d00b      	beq.n	8000e02 <main+0xb6>
        __asm volatile
 8000dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dee:	f383 8811 	msr	BASEPRI, r3
 8000df2:	f3bf 8f6f 	isb	sy
 8000df6:	f3bf 8f4f 	dsb	sy
 8000dfa:	60fb      	str	r3, [r7, #12]
    }
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	e7fd      	b.n	8000dfe <main+0xb2>

  // Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000e02:	f003 fee5 	bl	8004bd0 <vTaskStartScheduler>
  // insufficient memory in heap
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e06:	bf00      	nop
 8000e08:	e7fd      	b.n	8000e06 <main+0xba>
 8000e0a:	bf00      	nop
 8000e0c:	200000e4 	.word	0x200000e4
 8000e10:	40020000 	.word	0x40020000
 8000e14:	2000014c 	.word	0x2000014c
 8000e18:	08006f74 	.word	0x08006f74
 8000e1c:	08001121 	.word	0x08001121
 8000e20:	08006f7c 	.word	0x08006f7c
 8000e24:	0800123d 	.word	0x0800123d

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	@ 0x50
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	2230      	movs	r2, #48	@ 0x30
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f005 fc08 	bl	800664c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <SystemClock_Config+0xcc>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a27      	ldr	r2, [pc, #156]	@ (8000ef4 <SystemClock_Config+0xcc>)
 8000e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <SystemClock_Config+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e74:	4a20      	ldr	r2, [pc, #128]	@ (8000ef8 <SystemClock_Config+0xd0>)
 8000e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <SystemClock_Config+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e9c:	2319      	movs	r3, #25
 8000e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ea0:	2390      	movs	r3, #144	@ 0x90
 8000ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 ff0b 	bl	8002ccc <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ebc:	f000 fa07 	bl	80012ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2102      	movs	r1, #2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 f96d 	bl	80031bc <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ee8:	f000 f9f1 	bl	80012ce <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3750      	adds	r7, #80	@ 0x50
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <MX_I2C1_Init+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <MX_I2C1_Init+0x58>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <MX_I2C1_Init+0x50>)
 8000f3a:	f001 f8fb 	bl	8002134 <HAL_I2C_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f44:	f000 f9c3 	bl	80012ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000090 	.word	0x20000090
 8000f50:	40005400 	.word	0x40005400
 8000f54:	00061a80 	.word	0x00061a80

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000f76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff4 <MX_TIM1_Init+0x9c>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000f7c:	2247      	movs	r2, #71	@ 0x47
 8000f7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa0:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000fa2:	f002 fb09 	bl	80035b8 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fac:	f000 f98f 	bl	80012ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000fbe:	f002 fcf7 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fc8:	f000 f981 	bl	80012ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_TIM1_Init+0x98>)
 8000fda:	f002 feff 	bl	8003ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f000 f973 	bl	80012ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200000e4 	.word	0x200000e4
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b3e      	ldr	r3, [pc, #248]	@ (800110c <MX_GPIO_Init+0x114>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a3d      	ldr	r2, [pc, #244]	@ (800110c <MX_GPIO_Init+0x114>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b3b      	ldr	r3, [pc, #236]	@ (800110c <MX_GPIO_Init+0x114>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b37      	ldr	r3, [pc, #220]	@ (800110c <MX_GPIO_Init+0x114>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a36      	ldr	r2, [pc, #216]	@ (800110c <MX_GPIO_Init+0x114>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b34      	ldr	r3, [pc, #208]	@ (800110c <MX_GPIO_Init+0x114>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b30      	ldr	r3, [pc, #192]	@ (800110c <MX_GPIO_Init+0x114>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a2f      	ldr	r2, [pc, #188]	@ (800110c <MX_GPIO_Init+0x114>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <MX_GPIO_Init+0x114>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b29      	ldr	r3, [pc, #164]	@ (800110c <MX_GPIO_Init+0x114>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a28      	ldr	r2, [pc, #160]	@ (800110c <MX_GPIO_Init+0x114>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b26      	ldr	r3, [pc, #152]	@ (800110c <MX_GPIO_Init+0x114>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001084:	4822      	ldr	r0, [pc, #136]	@ (8001110 <MX_GPIO_Init+0x118>)
 8001086:	f001 f83b 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001090:	4820      	ldr	r0, [pc, #128]	@ (8001114 <MX_GPIO_Init+0x11c>)
 8001092:	f001 f835 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001096:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4818      	ldr	r0, [pc, #96]	@ (8001110 <MX_GPIO_Init+0x118>)
 80010b0:	f000 fe8a 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b4:	2304      	movs	r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <MX_GPIO_Init+0x120>)
 80010c8:	f000 fe7e 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <MX_GPIO_Init+0x11c>)
 80010e2:	f000 fe71 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_GPIO_Init+0x11c>)
 8001100:	f000 fe62 	bl	8001dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	@ 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400
 800111c:	00000000 	.word	0x00000000

08001120 <task1_handler>:


/* USER CODE BEGIN 4 */
extern uint16_t Distance;
static void task1_handler(void* parameters) {
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800112e:	483c      	ldr	r0, [pc, #240]	@ (8001220 <task1_handler+0x100>)
 8001130:	f000 ffe6 	bl	8002100 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001134:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <task1_handler+0x104>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
        while (__HAL_TIM_GET_COUNTER(&htim1) < 10);  // wait for 10 us
 800113c:	bf00      	nop
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <task1_handler+0x104>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	2b09      	cmp	r3, #9
 8001146:	d9fa      	bls.n	800113e <task1_handler+0x1e>
        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114e:	4834      	ldr	r0, [pc, #208]	@ (8001220 <task1_handler+0x100>)
 8001150:	f000 ffd6 	bl	8002100 <HAL_GPIO_WritePin>

        pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001154:	f000 fd26 	bl	8001ba4 <HAL_GetTick>
 8001158:	4603      	mov	r3, r0
 800115a:	4a33      	ldr	r2, [pc, #204]	@ (8001228 <task1_handler+0x108>)
 800115c:	6013      	str	r3, [r2, #0]
        // wait for the echo pin to go high
        while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 800115e:	bf00      	nop
 8001160:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001164:	482e      	ldr	r0, [pc, #184]	@ (8001220 <task1_handler+0x100>)
 8001166:	f000 ffb3 	bl	80020d0 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d108      	bne.n	8001182 <task1_handler+0x62>
 8001170:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <task1_handler+0x108>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f103 040a 	add.w	r4, r3, #10
 8001178:	f000 fd14 	bl	8001ba4 <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	429c      	cmp	r4, r3
 8001180:	d8ee      	bhi.n	8001160 <task1_handler+0x40>
        Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001182:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <task1_handler+0x104>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	4a28      	ldr	r2, [pc, #160]	@ (800122c <task1_handler+0x10c>)
 800118a:	6013      	str	r3, [r2, #0]

        pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800118c:	f000 fd0a 	bl	8001ba4 <HAL_GetTick>
 8001190:	4603      	mov	r3, r0
 8001192:	4a25      	ldr	r2, [pc, #148]	@ (8001228 <task1_handler+0x108>)
 8001194:	6013      	str	r3, [r2, #0]
        // wait for the echo pin to go low
        while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001196:	bf00      	nop
 8001198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119c:	4820      	ldr	r0, [pc, #128]	@ (8001220 <task1_handler+0x100>)
 800119e:	f000 ff97 	bl	80020d0 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <task1_handler+0x9a>
 80011a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <task1_handler+0x108>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80011b0:	f000 fcf8 	bl	8001ba4 <HAL_GetTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	429c      	cmp	r4, r3
 80011b8:	d8ee      	bhi.n	8001198 <task1_handler+0x78>
        Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <task1_handler+0x104>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001230 <task1_handler+0x110>)
 80011c2:	6013      	str	r3, [r2, #0]

        Distance = (Value2 - Value1) * 0.034 / 2;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <task1_handler+0x110>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <task1_handler+0x10c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f998 	bl	8000504 <__aeabi_ui2d>
 80011d4:	a310      	add	r3, pc, #64	@ (adr r3, 8001218 <task1_handler+0xf8>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff fa0d 	bl	80005f8 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011ee:	f7ff fb2d 	bl	800084c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fc0f 	bl	8000a1c <__aeabi_d2uiz>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <task1_handler+0x114>)
 8001204:	801a      	strh	r2, [r3, #0]

        // Send distance value to the queue
        xQueueSend(distanceQueue, &Distance, portMAX_DELAY);
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <task1_handler+0x118>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	2300      	movs	r3, #0
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	4908      	ldr	r1, [pc, #32]	@ (8001234 <task1_handler+0x114>)
 8001212:	f002 fff9 	bl	8004208 <xQueueGenericSend>
        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001216:	e787      	b.n	8001128 <task1_handler+0x8>
 8001218:	b020c49c 	.word	0xb020c49c
 800121c:	3fa16872 	.word	0x3fa16872
 8001220:	40020000 	.word	0x40020000
 8001224:	200000e4 	.word	0x200000e4
 8001228:	2000012c 	.word	0x2000012c
 800122c:	20000130 	.word	0x20000130
 8001230:	20000134 	.word	0x20000134
 8001234:	20000138 	.word	0x20000138
 8001238:	2000014c 	.word	0x2000014c

0800123c <task2_handler>:

        //HAL_Delay(50);
    }
}

static void task2_handler(void* parameters) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    uint16_t receivedDistance;
    while (1) {
        // Receive distance value from the queue
        if (xQueueReceive(distanceQueue, &receivedDistance, portMAX_DELAY) == pdPASS) {
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <task2_handler+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f107 010e 	add.w	r1, r7, #14
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	4618      	mov	r0, r3
 8001252:	f003 f8db 	bl	800440c <xQueueReceive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d119      	bne.n	8001290 <task2_handler+0x54>
            // Display the distance
            SSD1306_GotoXY(0, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f9a6 	bl	80015b0 <SSD1306_GotoXY>
            SSD1306_Puts("Distance:", &Font_11x18, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <task2_handler+0x60>)
 8001268:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <task2_handler+0x64>)
 800126a:	f000 fa35 	bl	80016d8 <SSD1306_Puts>
            sprintf(strCopy, "%d    ", receivedDistance);
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	461a      	mov	r2, r3
 8001272:	490c      	ldr	r1, [pc, #48]	@ (80012a4 <task2_handler+0x68>)
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <task2_handler+0x6c>)
 8001276:	f005 f9c9 	bl	800660c <siprintf>
            SSD1306_GotoXY(0, 30);
 800127a:	211e      	movs	r1, #30
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f997 	bl	80015b0 <SSD1306_GotoXY>
            SSD1306_Puts(strCopy, &Font_16x26, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	4909      	ldr	r1, [pc, #36]	@ (80012ac <task2_handler+0x70>)
 8001286:	4808      	ldr	r0, [pc, #32]	@ (80012a8 <task2_handler+0x6c>)
 8001288:	f000 fa26 	bl	80016d8 <SSD1306_Puts>
            SSD1306_UpdateScreen();
 800128c:	f000 f8ea 	bl	8001464 <SSD1306_UpdateScreen>
        }
        HAL_Delay(50);
 8001290:	2032      	movs	r0, #50	@ 0x32
 8001292:	f000 fc93 	bl	8001bbc <HAL_Delay>
        if (xQueueReceive(distanceQueue, &receivedDistance, portMAX_DELAY) == pdPASS) {
 8001296:	e7d5      	b.n	8001244 <task2_handler+0x8>
 8001298:	2000014c 	.word	0x2000014c
 800129c:	20000000 	.word	0x20000000
 80012a0:	08006f84 	.word	0x08006f84
 80012a4:	08006f90 	.word	0x08006f90
 80012a8:	2000013c 	.word	0x2000013c
 80012ac:	20000008 	.word	0x20000008

080012b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c0:	d101      	bne.n	80012c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012c2:	f000 fc5b 	bl	8001b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d6:	bf00      	nop
 80012d8:	e7fd      	b.n	80012d6 <Error_Handler+0x8>
	...

080012dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80012e2:	f000 fa1f 	bl	8001724 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80012e6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80012ea:	2201      	movs	r2, #1
 80012ec:	2178      	movs	r1, #120	@ 0x78
 80012ee:	485b      	ldr	r0, [pc, #364]	@ (800145c <SSD1306_Init+0x180>)
 80012f0:	f001 f962 	bl	80025b8 <HAL_I2C_IsDeviceReady>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e0a9      	b.n	8001452 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80012fe:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001302:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001304:	e002      	b.n	800130c <SSD1306_Init+0x30>
		p--;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3b01      	subs	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f9      	bne.n	8001306 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001312:	22ae      	movs	r2, #174	@ 0xae
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	@ 0x78
 8001318:	f000 fa80 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	@ 0x78
 8001322:	f000 fa7b 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001326:	2210      	movs	r2, #16
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	@ 0x78
 800132c:	f000 fa76 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001330:	22b0      	movs	r2, #176	@ 0xb0
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	@ 0x78
 8001336:	f000 fa71 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800133a:	22c8      	movs	r2, #200	@ 0xc8
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	@ 0x78
 8001340:	f000 fa6c 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	@ 0x78
 800134a:	f000 fa67 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800134e:	2210      	movs	r2, #16
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	@ 0x78
 8001354:	f000 fa62 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001358:	2240      	movs	r2, #64	@ 0x40
 800135a:	2100      	movs	r1, #0
 800135c:	2078      	movs	r0, #120	@ 0x78
 800135e:	f000 fa5d 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001362:	2281      	movs	r2, #129	@ 0x81
 8001364:	2100      	movs	r1, #0
 8001366:	2078      	movs	r0, #120	@ 0x78
 8001368:	f000 fa58 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800136c:	22ff      	movs	r2, #255	@ 0xff
 800136e:	2100      	movs	r1, #0
 8001370:	2078      	movs	r0, #120	@ 0x78
 8001372:	f000 fa53 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001376:	22a1      	movs	r2, #161	@ 0xa1
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	@ 0x78
 800137c:	f000 fa4e 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001380:	22a6      	movs	r2, #166	@ 0xa6
 8001382:	2100      	movs	r1, #0
 8001384:	2078      	movs	r0, #120	@ 0x78
 8001386:	f000 fa49 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800138a:	22a8      	movs	r2, #168	@ 0xa8
 800138c:	2100      	movs	r1, #0
 800138e:	2078      	movs	r0, #120	@ 0x78
 8001390:	f000 fa44 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001394:	223f      	movs	r2, #63	@ 0x3f
 8001396:	2100      	movs	r1, #0
 8001398:	2078      	movs	r0, #120	@ 0x78
 800139a:	f000 fa3f 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800139e:	22a4      	movs	r2, #164	@ 0xa4
 80013a0:	2100      	movs	r1, #0
 80013a2:	2078      	movs	r0, #120	@ 0x78
 80013a4:	f000 fa3a 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80013a8:	22d3      	movs	r2, #211	@ 0xd3
 80013aa:	2100      	movs	r1, #0
 80013ac:	2078      	movs	r0, #120	@ 0x78
 80013ae:	f000 fa35 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2078      	movs	r0, #120	@ 0x78
 80013b8:	f000 fa30 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80013bc:	22d5      	movs	r2, #213	@ 0xd5
 80013be:	2100      	movs	r1, #0
 80013c0:	2078      	movs	r0, #120	@ 0x78
 80013c2:	f000 fa2b 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80013c6:	22f0      	movs	r2, #240	@ 0xf0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2078      	movs	r0, #120	@ 0x78
 80013cc:	f000 fa26 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80013d0:	22d9      	movs	r2, #217	@ 0xd9
 80013d2:	2100      	movs	r1, #0
 80013d4:	2078      	movs	r0, #120	@ 0x78
 80013d6:	f000 fa21 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80013da:	2222      	movs	r2, #34	@ 0x22
 80013dc:	2100      	movs	r1, #0
 80013de:	2078      	movs	r0, #120	@ 0x78
 80013e0:	f000 fa1c 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80013e4:	22da      	movs	r2, #218	@ 0xda
 80013e6:	2100      	movs	r1, #0
 80013e8:	2078      	movs	r0, #120	@ 0x78
 80013ea:	f000 fa17 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80013ee:	2212      	movs	r2, #18
 80013f0:	2100      	movs	r1, #0
 80013f2:	2078      	movs	r0, #120	@ 0x78
 80013f4:	f000 fa12 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80013f8:	22db      	movs	r2, #219	@ 0xdb
 80013fa:	2100      	movs	r1, #0
 80013fc:	2078      	movs	r0, #120	@ 0x78
 80013fe:	f000 fa0d 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001402:	2220      	movs	r2, #32
 8001404:	2100      	movs	r1, #0
 8001406:	2078      	movs	r0, #120	@ 0x78
 8001408:	f000 fa08 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800140c:	228d      	movs	r2, #141	@ 0x8d
 800140e:	2100      	movs	r1, #0
 8001410:	2078      	movs	r0, #120	@ 0x78
 8001412:	f000 fa03 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001416:	2214      	movs	r2, #20
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	@ 0x78
 800141c:	f000 f9fe 	bl	800181c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001420:	22af      	movs	r2, #175	@ 0xaf
 8001422:	2100      	movs	r1, #0
 8001424:	2078      	movs	r0, #120	@ 0x78
 8001426:	f000 f9f9 	bl	800181c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800142a:	222e      	movs	r2, #46	@ 0x2e
 800142c:	2100      	movs	r1, #0
 800142e:	2078      	movs	r0, #120	@ 0x78
 8001430:	f000 f9f4 	bl	800181c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f843 	bl	80014c0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800143a:	f000 f813 	bl	8001464 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <SSD1306_Init+0x184>)
 8001440:	2200      	movs	r2, #0
 8001442:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <SSD1306_Init+0x184>)
 8001446:	2200      	movs	r2, #0
 8001448:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <SSD1306_Init+0x184>)
 800144c:	2201      	movs	r2, #1
 800144e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000090 	.word	0x20000090
 8001460:	20000550 	.word	0x20000550

08001464 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	e01d      	b.n	80014ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3b50      	subs	r3, #80	@ 0x50
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	2078      	movs	r0, #120	@ 0x78
 800147c:	f000 f9ce 	bl	800181c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2078      	movs	r0, #120	@ 0x78
 8001486:	f000 f9c9 	bl	800181c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800148a:	2210      	movs	r2, #16
 800148c:	2100      	movs	r1, #0
 800148e:	2078      	movs	r0, #120	@ 0x78
 8001490:	f000 f9c4 	bl	800181c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	01db      	lsls	r3, r3, #7
 8001498:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <SSD1306_UpdateScreen+0x58>)
 800149a:	441a      	add	r2, r3
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	2140      	movs	r1, #64	@ 0x40
 80014a0:	2078      	movs	r0, #120	@ 0x78
 80014a2:	f000 f955 	bl	8001750 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	3301      	adds	r3, #1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	d9de      	bls.n	8001470 <SSD1306_UpdateScreen+0xc>
	}
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000150 	.word	0x20000150

080014c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <SSD1306_Fill+0x14>
 80014d0:	2300      	movs	r3, #0
 80014d2:	e000      	b.n	80014d6 <SSD1306_Fill+0x16>
 80014d4:	23ff      	movs	r3, #255	@ 0xff
 80014d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014da:	4619      	mov	r1, r3
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <SSD1306_Fill+0x2c>)
 80014de:	f005 f8b5 	bl	800664c <memset>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000150 	.word	0x20000150

080014f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	460b      	mov	r3, r1
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	70fb      	strb	r3, [r7, #3]
	if (
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	2b7f      	cmp	r3, #127	@ 0x7f
 8001506:	d848      	bhi.n	800159a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	2b3f      	cmp	r3, #63	@ 0x3f
 800150c:	d845      	bhi.n	800159a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <SSD1306_DrawPixel+0xb8>)
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d11a      	bne.n	8001560 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800152a:	88fa      	ldrh	r2, [r7, #6]
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	b298      	uxth	r0, r3
 8001532:	4603      	mov	r3, r0
 8001534:	01db      	lsls	r3, r3, #7
 8001536:	4413      	add	r3, r2
 8001538:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <SSD1306_DrawPixel+0xbc>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	b25a      	sxtb	r2, r3
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	b25b      	sxtb	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b259      	sxtb	r1, r3
 8001550:	88fa      	ldrh	r2, [r7, #6]
 8001552:	4603      	mov	r3, r0
 8001554:	01db      	lsls	r3, r3, #7
 8001556:	4413      	add	r3, r2
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <SSD1306_DrawPixel+0xbc>)
 800155c:	54d1      	strb	r1, [r2, r3]
 800155e:	e01d      	b.n	800159c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	b298      	uxth	r0, r3
 8001568:	4603      	mov	r3, r0
 800156a:	01db      	lsls	r3, r3, #7
 800156c:	4413      	add	r3, r2
 800156e:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <SSD1306_DrawPixel+0xbc>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	b25a      	sxtb	r2, r3
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	b25b      	sxtb	r3, r3
 8001586:	4013      	ands	r3, r2
 8001588:	b259      	sxtb	r1, r3
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	4603      	mov	r3, r0
 800158e:	01db      	lsls	r3, r3, #7
 8001590:	4413      	add	r3, r2
 8001592:	b2c9      	uxtb	r1, r1
 8001594:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <SSD1306_DrawPixel+0xbc>)
 8001596:	54d1      	strb	r1, [r2, r3]
 8001598:	e000      	b.n	800159c <SSD1306_DrawPixel+0xac>
		return;
 800159a:	bf00      	nop
	}
}
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000550 	.word	0x20000550
 80015ac:	20000150 	.word	0x20000150

080015b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	460a      	mov	r2, r1
 80015ba:	80fb      	strh	r3, [r7, #6]
 80015bc:	4613      	mov	r3, r2
 80015be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80015c0:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <SSD1306_GotoXY+0x28>)
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <SSD1306_GotoXY+0x28>)
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	8053      	strh	r3, [r2, #2]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000550 	.word	0x20000550

080015dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	4613      	mov	r3, r2
 80015ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015ec:	4b39      	ldr	r3, [pc, #228]	@ (80016d4 <SSD1306_Putc+0xf8>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
	if (
 80015f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80015fa:	dc07      	bgt.n	800160c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80015fc:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <SSD1306_Putc+0xf8>)
 80015fe:	885b      	ldrh	r3, [r3, #2]
 8001600:	461a      	mov	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001608:	2b3f      	cmp	r3, #63	@ 0x3f
 800160a:	dd01      	ble.n	8001610 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	e05d      	b.n	80016cc <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e04b      	b.n	80016ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	3b20      	subs	r3, #32
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	7849      	ldrb	r1, [r1, #1]
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	4619      	mov	r1, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	440b      	add	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	e030      	b.n	800169c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800164a:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <SSD1306_Putc+0xf8>)
 800164c:	881a      	ldrh	r2, [r3, #0]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	b29b      	uxth	r3, r3
 8001652:	4413      	add	r3, r2
 8001654:	b298      	uxth	r0, r3
 8001656:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <SSD1306_Putc+0xf8>)
 8001658:	885a      	ldrh	r2, [r3, #2]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	b29b      	uxth	r3, r3
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff ff43 	bl	80014f0 <SSD1306_DrawPixel>
 800166a:	e014      	b.n	8001696 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <SSD1306_Putc+0xf8>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4413      	add	r3, r2
 8001676:	b298      	uxth	r0, r3
 8001678:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <SSD1306_Putc+0xf8>)
 800167a:	885a      	ldrh	r2, [r3, #2]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4413      	add	r3, r2
 8001682:	b299      	uxth	r1, r3
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf0c      	ite	eq
 800168a:	2301      	moveq	r3, #1
 800168c:	2300      	movne	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	f7ff ff2d 	bl	80014f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	3301      	adds	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d3c8      	bcc.n	800163a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	461a      	mov	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d3ad      	bcc.n	8001616 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <SSD1306_Putc+0xf8>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <SSD1306_Putc+0xf8>)
 80016c8:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80016ca:	79fb      	ldrb	r3, [r7, #7]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000550 	.word	0x20000550

080016d8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4613      	mov	r3, r2
 80016e4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80016e6:	e012      	b.n	800170e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	79fa      	ldrb	r2, [r7, #7]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff73 	bl	80015dc <SSD1306_Putc>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d002      	beq.n	8001708 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	e008      	b.n	800171a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e8      	bne.n	80016e8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <ssd1306_I2C_Init+0x28>)
 800172c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800172e:	e002      	b.n	8001736 <ssd1306_I2C_Init+0x12>
		p--;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	0003d090 	.word	0x0003d090

08001750 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b0c7      	sub	sp, #284	@ 0x11c
 8001754:	af02      	add	r7, sp, #8
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800175e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001762:	600a      	str	r2, [r1, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800176a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800176e:	4622      	mov	r2, r4
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001776:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800177a:	4602      	mov	r2, r0
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001786:	460a      	mov	r2, r1
 8001788:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800178a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800178e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001792:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001796:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80017a4:	e015      	b.n	80017d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80017a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017ae:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	441a      	add	r2, r3
 80017b6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017ba:	3301      	adds	r3, #1
 80017bc:	7811      	ldrb	r1, [r2, #0]
 80017be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017c2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80017c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80017c8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80017d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017dc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d8df      	bhi.n	80017a6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80017e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017ea:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b299      	uxth	r1, r3
 80017f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	200a      	movs	r0, #10
 8001806:	9000      	str	r0, [sp, #0]
 8001808:	4803      	ldr	r0, [pc, #12]	@ (8001818 <ssd1306_I2C_WriteMulti+0xc8>)
 800180a:	f000 fdd7 	bl	80023bc <HAL_I2C_Master_Transmit>
}
 800180e:	bf00      	nop
 8001810:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	20000090 	.word	0x20000090

0800181c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af02      	add	r7, sp, #8
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	460b      	mov	r3, r1
 8001828:	71bb      	strb	r3, [r7, #6]
 800182a:	4613      	mov	r3, r2
 800182c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001832:	797b      	ldrb	r3, [r7, #5]
 8001834:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	b299      	uxth	r1, r3
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	230a      	movs	r3, #10
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2302      	movs	r3, #2
 8001844:	4803      	ldr	r0, [pc, #12]	@ (8001854 <ssd1306_I2C_Write+0x38>)
 8001846:	f000 fdb9 	bl	80023bc <HAL_I2C_Master_Transmit>
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000090 	.word	0x20000090

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186c:	6453      	str	r3, [r2, #68]	@ 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a19      	ldr	r2, [pc, #100]	@ (800192c <HAL_I2C_MspInit+0x84>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12b      	bne.n	8001922 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e6:	23c0      	movs	r3, #192	@ 0xc0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ea:	2312      	movs	r3, #18
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f6:	2304      	movs	r3, #4
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <HAL_I2C_MspInit+0x8c>)
 8001902:	f000 fa61 	bl	8001dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a08      	ldr	r2, [pc, #32]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 8001910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_I2C_MspInit+0x88>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40005400 	.word	0x40005400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400

08001938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10d      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_TIM_Base_MspInit+0x40>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_TIM_Base_MspInit+0x40>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <HAL_TIM_Base_MspInit+0x40>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40010000 	.word	0x40010000
 8001978:	40023800 	.word	0x40023800

0800197c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	@ 0x38
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <HAL_InitTick+0xe8>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	4a33      	ldr	r2, [pc, #204]	@ (8001a64 <HAL_InitTick+0xe8>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6413      	str	r3, [r2, #64]	@ 0x40
 800199c:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_InitTick+0xe8>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a8:	f107 0210 	add.w	r2, r7, #16
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fdce 	bl	8003554 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019c2:	f001 fdb3 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 80019c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80019c8:	e004      	b.n	80019d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ca:	f001 fdaf 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 80019ce:	4603      	mov	r3, r0
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d6:	4a24      	ldr	r2, [pc, #144]	@ (8001a68 <HAL_InitTick+0xec>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	0c9b      	lsrs	r3, r3, #18
 80019de:	3b01      	subs	r3, #1
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_InitTick+0xf0>)
 80019e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80019ea:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_InitTick+0xf0>)
 80019ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019f0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80019f2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a6c <HAL_InitTick+0xf0>)
 80019f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <HAL_InitTick+0xf0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_InitTick+0xf0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <HAL_InitTick+0xf0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001a0a:	4818      	ldr	r0, [pc, #96]	@ (8001a6c <HAL_InitTick+0xf0>)
 8001a0c:	f001 fdd4 	bl	80035b8 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11b      	bne.n	8001a56 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001a1e:	4813      	ldr	r0, [pc, #76]	@ (8001a6c <HAL_InitTick+0xf0>)
 8001a20:	f001 fe74 	bl	800370c <HAL_TIM_Base_Start_IT>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d111      	bne.n	8001a56 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a32:	201c      	movs	r0, #28
 8001a34:	f000 f9ba 	bl	8001dac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	d808      	bhi.n	8001a50 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	201c      	movs	r0, #28
 8001a44:	f000 f996 	bl	8001d74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a48:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <HAL_InitTick+0xf4>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e002      	b.n	8001a56 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3738      	adds	r7, #56	@ 0x38
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	431bde83 	.word	0x431bde83
 8001a6c:	20000558 	.word	0x20000558
 8001a70:	20000014 	.word	0x20000014

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <NMI_Handler+0x4>

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <TIM2_IRQHandler+0x10>)
 8001ab2:	f001 fe8d 	bl	80037d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000558 	.word	0x20000558

08001ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <SystemInit+0x20>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aca:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <SystemInit+0x20>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ae8:	f7ff ffea 	bl	8001ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	@ (8001b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f004 fda3 	bl	800665c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b16:	f7ff f919 	bl	8000d4c <main>
  bx  lr    
 8001b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b28:	080090b4 	.word	0x080090b4
  ldr r2, =_sbss
 8001b2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b30:	2000f894 	.word	0x2000f894

08001b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <HAL_Init+0x40>)
 8001b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <HAL_Init+0x40>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	@ (8001b78 <HAL_Init+0x40>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 f8fc 	bl	8001d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f7ff ff08 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff fe74 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023c00 	.word	0x40023c00

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000018 	.word	0x20000018
 8001ba0:	200005a0 	.word	0x200005a0

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200005a0 	.word	0x200005a0

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000018 	.word	0x20000018

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	@ (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	@ (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff4c 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d86:	f7ff ff61 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	6978      	ldr	r0, [r7, #20]
 8001d92:	f7ff ffb1 	bl	8001cf8 <NVIC_EncodePriority>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff80 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001da4:	bf00      	nop
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff54 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	@ 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e159      	b.n	8002098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8148 	bne.w	8002092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d005      	beq.n	8001e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d130      	bne.n	8001e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 0201 	and.w	r2, r3, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d017      	beq.n	8001eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a2 	beq.w	8002092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b57      	ldr	r3, [pc, #348]	@ (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	4a56      	ldr	r2, [pc, #344]	@ (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5e:	4b54      	ldr	r3, [pc, #336]	@ (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6a:	4a52      	ldr	r2, [pc, #328]	@ (80020b4 <HAL_GPIO_Init+0x2ec>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a49      	ldr	r2, [pc, #292]	@ (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x202>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a48      	ldr	r2, [pc, #288]	@ (80020bc <HAL_GPIO_Init+0x2f4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x1fe>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a47      	ldr	r2, [pc, #284]	@ (80020c0 <HAL_GPIO_Init+0x2f8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x1fa>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a46      	ldr	r2, [pc, #280]	@ (80020c4 <HAL_GPIO_Init+0x2fc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x1f6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a45      	ldr	r2, [pc, #276]	@ (80020c8 <HAL_GPIO_Init+0x300>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x1f2>
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	e008      	b.n	8001fcc <HAL_GPIO_Init+0x204>
 8001fba:	2307      	movs	r3, #7
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x204>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x204>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x204>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x204>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fdc:	4935      	ldr	r1, [pc, #212]	@ (80020b4 <HAL_GPIO_Init+0x2ec>)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fea:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <HAL_GPIO_Init+0x304>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800200e:	4a2f      	ldr	r2, [pc, #188]	@ (80020cc <HAL_GPIO_Init+0x304>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_GPIO_Init+0x304>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002038:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <HAL_GPIO_Init+0x304>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800203e:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_GPIO_Init+0x304>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002062:	4a1a      	ldr	r2, [pc, #104]	@ (80020cc <HAL_GPIO_Init+0x304>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <HAL_GPIO_Init+0x304>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800208c:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <HAL_GPIO_Init+0x304>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3301      	adds	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	f67f aea2 	bls.w	8001de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40013800 	.word	0x40013800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020c00 	.word	0x40020c00
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40013c00 	.word	0x40013c00

080020d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e001      	b.n	80020f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e12b      	b.n	800239e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fba4 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	@ 0x24
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002198:	f001 f9c8 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 800219c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a81      	ldr	r2, [pc, #516]	@ (80023a8 <HAL_I2C_Init+0x274>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d807      	bhi.n	80021b8 <HAL_I2C_Init+0x84>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a80      	ldr	r2, [pc, #512]	@ (80023ac <HAL_I2C_Init+0x278>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bf94      	ite	ls
 80021b0:	2301      	movls	r3, #1
 80021b2:	2300      	movhi	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e006      	b.n	80021c6 <HAL_I2C_Init+0x92>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a7d      	ldr	r2, [pc, #500]	@ (80023b0 <HAL_I2C_Init+0x27c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf94      	ite	ls
 80021c0:	2301      	movls	r3, #1
 80021c2:	2300      	movhi	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0e7      	b.n	800239e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a78      	ldr	r2, [pc, #480]	@ (80023b4 <HAL_I2C_Init+0x280>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a6a      	ldr	r2, [pc, #424]	@ (80023a8 <HAL_I2C_Init+0x274>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d802      	bhi.n	8002208 <HAL_I2C_Init+0xd4>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	e009      	b.n	800221c <HAL_I2C_Init+0xe8>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	4a69      	ldr	r2, [pc, #420]	@ (80023b8 <HAL_I2C_Init+0x284>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800222e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	495c      	ldr	r1, [pc, #368]	@ (80023a8 <HAL_I2C_Init+0x274>)
 8002238:	428b      	cmp	r3, r1
 800223a:	d819      	bhi.n	8002270 <HAL_I2C_Init+0x13c>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e59      	subs	r1, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fbb1 f3f3 	udiv	r3, r1, r3
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_I2C_Init+0x138>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e59      	subs	r1, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fbb1 f3f3 	udiv	r3, r1, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	e051      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 800226c:	2304      	movs	r3, #4
 800226e:	e04f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <HAL_I2C_Init+0x168>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e012      	b.n	80022c2 <HAL_I2C_Init+0x18e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	0099      	lsls	r1, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x196>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e022      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <HAL_I2C_Init+0x1bc>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e58      	subs	r0, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800233e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6911      	ldr	r1, [r2, #16]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	000186a0 	.word	0x000186a0
 80023ac:	001e847f 	.word	0x001e847f
 80023b0:	003d08ff 	.word	0x003d08ff
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	461a      	mov	r2, r3
 80023c8:	460b      	mov	r3, r1
 80023ca:	817b      	strh	r3, [r7, #10]
 80023cc:	4613      	mov	r3, r2
 80023ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff fbe8 	bl	8001ba4 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	f040 80e0 	bne.w	80025a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2319      	movs	r3, #25
 80023ea:	2201      	movs	r2, #1
 80023ec:	4970      	ldr	r1, [pc, #448]	@ (80025b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fa92 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0d3      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_I2C_Master_Transmit+0x50>
 8002408:	2302      	movs	r3, #2
 800240a:	e0cc      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d007      	beq.n	8002432 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	@ 0x21
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2210      	movs	r2, #16
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a50      	ldr	r2, [pc, #320]	@ (80025b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002474:	8979      	ldrh	r1, [r7, #10]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f9ca 	bl	8002814 <I2C_MasterRequestWrite>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e08d      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a0:	e066      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fb50 	bl	8002b4c <I2C_WaitOnTXEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d107      	bne.n	80024ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06b      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d11b      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x188>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d017      	beq.n	8002544 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	6a39      	ldr	r1, [r7, #32]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fb47 	bl	8002bdc <I2C_WaitOnBTFFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	2b04      	cmp	r3, #4
 800255a:	d107      	bne.n	800256c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e01a      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d194      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000

080025b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff faec 	bl	8001ba4 <HAL_GetTick>
 80025cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	f040 8111 	bne.w	8002802 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2319      	movs	r3, #25
 80025e6:	2201      	movs	r2, #1
 80025e8:	4988      	ldr	r1, [pc, #544]	@ (800280c <HAL_I2C_IsDeviceReady+0x254>)
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f994 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	e104      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_I2C_IsDeviceReady+0x50>
 8002604:	2302      	movs	r3, #2
 8002606:	e0fd      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x24c>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d007      	beq.n	800262e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800263c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2224      	movs	r2, #36	@ 0x24
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a70      	ldr	r2, [pc, #448]	@ (8002810 <HAL_I2C_IsDeviceReady+0x258>)
 8002650:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002660:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f952 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00d      	beq.n	8002696 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002688:	d103      	bne.n	8002692 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0b6      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fa7d 	bl	8001ba4 <HAL_GetTick>
 80026aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026da:	e025      	b.n	8002728 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026dc:	f7ff fa62 	bl	8001ba4 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d302      	bcc.n	80026f2 <HAL_I2C_IsDeviceReady+0x13a>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22a0      	movs	r2, #160	@ 0xa0
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2ba0      	cmp	r3, #160	@ 0xa0
 8002732:	d005      	beq.n	8002740 <HAL_I2C_IsDeviceReady+0x188>
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <HAL_I2C_IsDeviceReady+0x188>
 800273a:	7dbb      	ldrb	r3, [r7, #22]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0cd      	beq.n	80026dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d129      	bne.n	80027aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002764:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2319      	movs	r3, #25
 8002782:	2201      	movs	r2, #1
 8002784:	4921      	ldr	r1, [pc, #132]	@ (800280c <HAL_I2C_IsDeviceReady+0x254>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f8c6 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e036      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e02c      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2319      	movs	r3, #25
 80027ca:	2201      	movs	r2, #1
 80027cc:	490f      	ldr	r1, [pc, #60]	@ (800280c <HAL_I2C_IsDeviceReady+0x254>)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f8a2 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e012      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f4ff af32 	bcc.w	8002652 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	00100002 	.word	0x00100002
 8002810:	ffff0000 	.word	0xffff0000

08002814 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	460b      	mov	r3, r1
 8002822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d006      	beq.n	800283e <I2C_MasterRequestWrite+0x2a>
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d003      	beq.n	800283e <I2C_MasterRequestWrite+0x2a>
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800283c:	d108      	bne.n	8002850 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e00b      	b.n	8002868 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	2b12      	cmp	r3, #18
 8002856:	d107      	bne.n	8002868 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f84f 	bl	8002918 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00d      	beq.n	800289c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288e:	d103      	bne.n	8002898 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002896:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e035      	b.n	8002908 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028a4:	d108      	bne.n	80028b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	e01b      	b.n	80028f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028b8:	897b      	ldrh	r3, [r7, #10]
 80028ba:	11db      	asrs	r3, r3, #7
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0306 	and.w	r3, r3, #6
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f063 030f 	orn	r3, r3, #15
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	490e      	ldr	r1, [pc, #56]	@ (8002910 <I2C_MasterRequestWrite+0xfc>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f898 	bl	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e010      	b.n	8002908 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028e6:	897b      	ldrh	r3, [r7, #10]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4907      	ldr	r1, [pc, #28]	@ (8002914 <I2C_MasterRequestWrite+0x100>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f888 	bl	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	00010008 	.word	0x00010008
 8002914:	00010002 	.word	0x00010002

08002918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002928:	e048      	b.n	80029bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d044      	beq.n	80029bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7ff f937 	bl	8001ba4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d139      	bne.n	80029bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10d      	bne.n	800296e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	43da      	mvns	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4013      	ands	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	e00c      	b.n	8002988 <I2C_WaitOnFlagUntilTimeout+0x70>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	43da      	mvns	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4013      	ands	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	429a      	cmp	r2, r3
 800298c:	d116      	bne.n	80029bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e023      	b.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	0c1b      	lsrs	r3, r3, #16
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d10d      	bne.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	e00c      	b.n	80029fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	43da      	mvns	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4013      	ands	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d093      	beq.n	800292a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1a:	e071      	b.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2a:	d123      	bne.n	8002a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e067      	b.n	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d041      	beq.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7c:	f7ff f892 	bl	8001ba4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d302      	bcc.n	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d136      	bne.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10c      	bne.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e00b      	b.n	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	43da      	mvns	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e021      	b.n	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d10c      	bne.n	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4013      	ands	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	e00b      	b.n	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f47f af6d 	bne.w	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b58:	e034      	b.n	8002bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f886 	bl	8002c6c <I2C_IsAcknowledgeFailed>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e034      	b.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d028      	beq.n	8002bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7ff f817 	bl	8001ba4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d11d      	bne.n	8002bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b92:	2b80      	cmp	r3, #128	@ 0x80
 8002b94:	d016      	beq.n	8002bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e007      	b.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bce:	2b80      	cmp	r3, #128	@ 0x80
 8002bd0:	d1c3      	bne.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be8:	e034      	b.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f83e 	bl	8002c6c <I2C_IsAcknowledgeFailed>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e034      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d028      	beq.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe ffcf 	bl	8001ba4 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11d      	bne.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d016      	beq.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d1c3      	bne.n	8002bea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d11b      	bne.n	8002cbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0204 	orr.w	r2, r3, #4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e267      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d075      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cea:	4b88      	ldr	r3, [pc, #544]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf6:	4b85      	ldr	r3, [pc, #532]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d112      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d02:	4b82      	ldr	r3, [pc, #520]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	4b7e      	ldr	r3, [pc, #504]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d05b      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x108>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d157      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e242      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d30:	d106      	bne.n	8002d40 <HAL_RCC_OscConfig+0x74>
 8002d32:	4b76      	ldr	r3, [pc, #472]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a75      	ldr	r2, [pc, #468]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xb0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x98>
 8002d4a:	4b70      	ldr	r3, [pc, #448]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b6d      	ldr	r3, [pc, #436]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6c      	ldr	r2, [pc, #432]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0xb0>
 8002d64:	4b69      	ldr	r3, [pc, #420]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a68      	ldr	r2, [pc, #416]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b66      	ldr	r3, [pc, #408]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a65      	ldr	r2, [pc, #404]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe ff0e 	bl	8001ba4 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe ff0a 	bl	8001ba4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	@ 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e207      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0xc0>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fefa 	bl	8001ba4 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fef6 	bl	8001ba4 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e1f3      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	4b51      	ldr	r3, [pc, #324]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0xe8>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d063      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d11c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfa:	4b44      	ldr	r3, [pc, #272]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	4b41      	ldr	r3, [pc, #260]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x152>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e1c7      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4937      	ldr	r1, [pc, #220]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	e03a      	b.n	8002eaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <HAL_RCC_OscConfig+0x244>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7fe feaf 	bl	8001ba4 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7fe feab 	bl	8001ba4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1a8      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4925      	ldr	r1, [pc, #148]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <HAL_RCC_OscConfig+0x244>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fe8e 	bl	8001ba4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fe8a 	bl	8001ba4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e187      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d036      	beq.n	8002f24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <HAL_RCC_OscConfig+0x248>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fe6e 	bl	8001ba4 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fe6a 	bl	8001ba4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e167      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x200>
 8002eea:	e01b      	b.n	8002f24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <HAL_RCC_OscConfig+0x248>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fe57 	bl	8001ba4 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	e00e      	b.n	8002f18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe fe53 	bl	8001ba4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d907      	bls.n	8002f18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e150      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470000 	.word	0x42470000
 8002f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b88      	ldr	r3, [pc, #544]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ea      	bne.n	8002efa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8097 	beq.w	8003060 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b81      	ldr	r3, [pc, #516]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b7d      	ldr	r3, [pc, #500]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a7c      	ldr	r2, [pc, #496]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b7a      	ldr	r3, [pc, #488]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b77      	ldr	r3, [pc, #476]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b74      	ldr	r3, [pc, #464]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a73      	ldr	r2, [pc, #460]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fe13 	bl	8001ba4 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe fe0f 	bl	8001ba4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e10c      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x2ea>
 8002fa8:	4b64      	ldr	r3, [pc, #400]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a63      	ldr	r2, [pc, #396]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb4:	e01c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x324>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x30c>
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	4a5e      	ldr	r2, [pc, #376]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fca:	4b5c      	ldr	r3, [pc, #368]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a5b      	ldr	r2, [pc, #364]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x324>
 8002fd8:	4b58      	ldr	r3, [pc, #352]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a57      	ldr	r2, [pc, #348]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe4:	4b55      	ldr	r3, [pc, #340]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a54      	ldr	r2, [pc, #336]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fdd4 	bl	8001ba4 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe fdd0 	bl	8001ba4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0cb      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	4b49      	ldr	r3, [pc, #292]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ee      	beq.n	8003000 <HAL_RCC_OscConfig+0x334>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fe fdbe 	bl	8001ba4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe fdba 	bl	8001ba4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0b5      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003042:	4b3e      	ldr	r3, [pc, #248]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ee      	bne.n	800302c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b39      	ldr	r3, [pc, #228]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	4a38      	ldr	r2, [pc, #224]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a1 	beq.w	80031ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306a:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d05c      	beq.n	8003130 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d141      	bne.n	8003102 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b31      	ldr	r3, [pc, #196]	@ (8003144 <HAL_RCC_OscConfig+0x478>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fd8e 	bl	8001ba4 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fd8a 	bl	8001ba4 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e087      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b27      	ldr	r3, [pc, #156]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	491b      	ldr	r1, [pc, #108]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_RCC_OscConfig+0x478>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe fd63 	bl	8001ba4 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe fd5f 	bl	8001ba4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e05c      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x416>
 8003100:	e054      	b.n	80031ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <HAL_RCC_OscConfig+0x478>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fd4c 	bl	8001ba4 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe fd48 	bl	8001ba4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e045      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x444>
 800312e:	e03d      	b.n	80031ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e038      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
 800313c:	40023800 	.word	0x40023800
 8003140:	40007000 	.word	0x40007000
 8003144:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_RCC_OscConfig+0x4ec>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d028      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d121      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d11a      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800317e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003180:	4293      	cmp	r3, r2
 8003182:	d111      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800

080031bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0cc      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b68      	ldr	r3, [pc, #416]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d90c      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b65      	ldr	r3, [pc, #404]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0b8      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003210:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a58      	ldr	r2, [pc, #352]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800321a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003228:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a52      	ldr	r2, [pc, #328]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b50      	ldr	r3, [pc, #320]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	494d      	ldr	r1, [pc, #308]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d044      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d119      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d003      	beq.n	800327a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	2b03      	cmp	r3, #3
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b3f      	ldr	r3, [pc, #252]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e067      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4934      	ldr	r1, [pc, #208]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7fe fc7a 	bl	8001ba4 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fe fc76 	bl	8001ba4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e04f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d20c      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e032      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4916      	ldr	r1, [pc, #88]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332e:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	490e      	ldr	r1, [pc, #56]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003342:	f000 f821 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490a      	ldr	r1, [pc, #40]	@ (800337c <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800335e:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fb0a 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023c00 	.word	0x40023c00
 8003378:	40023800 	.word	0x40023800
 800337c:	08009058 	.word	0x08009058
 8003380:	20000010 	.word	0x20000010
 8003384:	20000014 	.word	0x20000014

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800338c:	b090      	sub	sp, #64	@ 0x40
 800338e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	637b      	str	r3, [r7, #52]	@ 0x34
 8003394:	2300      	movs	r3, #0
 8003396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003398:	2300      	movs	r3, #0
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a0:	4b59      	ldr	r3, [pc, #356]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d00d      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x40>
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	f200 80a1 	bhi.w	80034f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x34>
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d003      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ba:	e09b      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b53      	ldr	r3, [pc, #332]	@ (800350c <HAL_RCC_GetSysClockFreq+0x184>)
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80033c0:	e09b      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c2:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c6:	e098      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d028      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b4a      	ldr	r3, [pc, #296]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	2200      	movs	r2, #0
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033f0:	2100      	movs	r1, #0
 80033f2:	4b47      	ldr	r3, [pc, #284]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f4:	fb03 f201 	mul.w	r2, r3, r1
 80033f8:	2300      	movs	r3, #0
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	4413      	add	r3, r2
 8003400:	4a43      	ldr	r2, [pc, #268]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x188>)
 8003402:	fba0 1202 	umull	r1, r2, r0, r2
 8003406:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003408:	460a      	mov	r2, r1
 800340a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800340c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800340e:	4413      	add	r3, r2
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003414:	2200      	movs	r2, #0
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800341e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003422:	f7fd fb1b 	bl	8000a5c <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4613      	mov	r3, r2
 800342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800342e:	e053      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003430:	4b35      	ldr	r3, [pc, #212]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	2200      	movs	r2, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	617a      	str	r2, [r7, #20]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003442:	f04f 0b00 	mov.w	fp, #0
 8003446:	4652      	mov	r2, sl
 8003448:	465b      	mov	r3, fp
 800344a:	f04f 0000 	mov.w	r0, #0
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	0159      	lsls	r1, r3, #5
 8003454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003458:	0150      	lsls	r0, r2, #5
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	ebb2 080a 	subs.w	r8, r2, sl
 8003462:	eb63 090b 	sbc.w	r9, r3, fp
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003472:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003476:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800347a:	ebb2 0408 	subs.w	r4, r2, r8
 800347e:	eb63 0509 	sbc.w	r5, r3, r9
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	00eb      	lsls	r3, r5, #3
 800348c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003490:	00e2      	lsls	r2, r4, #3
 8003492:	4614      	mov	r4, r2
 8003494:	461d      	mov	r5, r3
 8003496:	eb14 030a 	adds.w	r3, r4, sl
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	eb45 030b 	adc.w	r3, r5, fp
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ae:	4629      	mov	r1, r5
 80034b0:	028b      	lsls	r3, r1, #10
 80034b2:	4621      	mov	r1, r4
 80034b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034b8:	4621      	mov	r1, r4
 80034ba:	028a      	lsls	r2, r1, #10
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c2:	2200      	movs	r2, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	60fa      	str	r2, [r7, #12]
 80034c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034cc:	f7fd fac6 	bl	8000a5c <__aeabi_uldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4613      	mov	r3, r2
 80034d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x180>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	3301      	adds	r3, #1
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80034e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034f2:	e002      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_RCC_GetSysClockFreq+0x184>)
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3740      	adds	r7, #64	@ 0x40
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	00f42400 	.word	0x00f42400
 8003510:	017d7840 	.word	0x017d7840

08003514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <HAL_RCC_GetHCLKFreq+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000010 	.word	0x20000010

0800352c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003530:	f7ff fff0 	bl	8003514 <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	08009068 	.word	0x08009068

08003554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	220f      	movs	r2, #15
 8003562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003570:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003588:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <HAL_RCC_GetClockConfig+0x5c>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <HAL_RCC_GetClockConfig+0x60>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0207 	and.w	r2, r3, #7
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40023c00 	.word	0x40023c00

080035b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e041      	b.n	800364e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe f9aa 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 faca 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d001      	beq.n	8003670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e03c      	b.n	80036ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1e      	ldr	r2, [pc, #120]	@ (80036f8 <HAL_TIM_Base_Start+0xa0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d018      	beq.n	80036b4 <HAL_TIM_Base_Start+0x5c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368a:	d013      	beq.n	80036b4 <HAL_TIM_Base_Start+0x5c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1a      	ldr	r2, [pc, #104]	@ (80036fc <HAL_TIM_Base_Start+0xa4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_TIM_Base_Start+0x5c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a19      	ldr	r2, [pc, #100]	@ (8003700 <HAL_TIM_Base_Start+0xa8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_TIM_Base_Start+0x5c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <HAL_TIM_Base_Start+0xac>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_Base_Start+0x5c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a16      	ldr	r2, [pc, #88]	@ (8003708 <HAL_TIM_Base_Start+0xb0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d010      	beq.n	80036e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d6:	e007      	b.n	80036e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40014000 	.word	0x40014000

0800370c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e044      	b.n	80037ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1e      	ldr	r2, [pc, #120]	@ (80037bc <HAL_TIM_Base_Start_IT+0xb0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x6c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374e:	d013      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x6c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1a      	ldr	r2, [pc, #104]	@ (80037c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x6c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a19      	ldr	r2, [pc, #100]	@ (80037c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x6c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_TIM_Base_Start_IT+0x6c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <HAL_TIM_Base_Start_IT+0xc0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d111      	bne.n	800379c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b06      	cmp	r3, #6
 8003788:	d010      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379a:	e007      	b.n	80037ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40014000 	.word	0x40014000

080037d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d020      	beq.n	8003834 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01b      	beq.n	8003834 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0202 	mvn.w	r2, #2
 8003804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f999 	bl	8003b52 <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f98b 	bl	8003b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f99c 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d020      	beq.n	8003880 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01b      	beq.n	8003880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0204 	mvn.w	r2, #4
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f973 	bl	8003b52 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f965 	bl	8003b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f976 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d020      	beq.n	80038cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01b      	beq.n	80038cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0208 	mvn.w	r2, #8
 800389c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2204      	movs	r2, #4
 80038a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f94d 	bl	8003b52 <HAL_TIM_IC_CaptureCallback>
 80038b8:	e005      	b.n	80038c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f93f 	bl	8003b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f950 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d020      	beq.n	8003918 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01b      	beq.n	8003918 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0210 	mvn.w	r2, #16
 80038e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2208      	movs	r2, #8
 80038ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f927 	bl	8003b52 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f919 	bl	8003b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f92a 	bl	8003b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0201 	mvn.w	r2, #1
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fcba 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fab6 	bl	8003ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8fb 	bl	8003b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0220 	mvn.w	r2, #32
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa88 	bl	8003eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_ConfigClockSource+0x1c>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0b4      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x186>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a04:	d03e      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0xd4>
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0a:	f200 8087 	bhi.w	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_TIM_ConfigClockSource+0x172>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	d87f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b70      	cmp	r3, #112	@ 0x70
 8003a1e:	d01a      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0xa6>
 8003a20:	2b70      	cmp	r3, #112	@ 0x70
 8003a22:	d87b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b60      	cmp	r3, #96	@ 0x60
 8003a26:	d050      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x11a>
 8003a28:	2b60      	cmp	r3, #96	@ 0x60
 8003a2a:	d877      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b50      	cmp	r3, #80	@ 0x50
 8003a2e:	d03c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xfa>
 8003a30:	2b50      	cmp	r3, #80	@ 0x50
 8003a32:	d873      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d058      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x13a>
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d86f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b30      	cmp	r3, #48	@ 0x30
 8003a3e:	d064      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	2b30      	cmp	r3, #48	@ 0x30
 8003a42:	d86b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d060      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d867      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05c      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d05a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	e062      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a66:	f000 f999 	bl	8003d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]
      break;
 8003a82:	e04f      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a94:	f000 f982 	bl	8003d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aa6:	609a      	str	r2, [r3, #8]
      break;
 8003aa8:	e03c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f000 f8f6 	bl	8003ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2150      	movs	r1, #80	@ 0x50
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f94f 	bl	8003d66 <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e02c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 f915 	bl	8003d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2160      	movs	r1, #96	@ 0x60
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f93f 	bl	8003d66 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 f8d6 	bl	8003ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	@ 0x40
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f92f 	bl	8003d66 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e00c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f000 f926 	bl	8003d66 <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8003c8c <TIM_Base_SetConfig+0xfc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bae:	d00b      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a37      	ldr	r2, [pc, #220]	@ (8003c90 <TIM_Base_SetConfig+0x100>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a36      	ldr	r2, [pc, #216]	@ (8003c94 <TIM_Base_SetConfig+0x104>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0x38>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a35      	ldr	r2, [pc, #212]	@ (8003c98 <TIM_Base_SetConfig+0x108>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d108      	bne.n	8003bda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c8c <TIM_Base_SetConfig+0xfc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01b      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d017      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a28      	ldr	r2, [pc, #160]	@ (8003c90 <TIM_Base_SetConfig+0x100>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a27      	ldr	r2, [pc, #156]	@ (8003c94 <TIM_Base_SetConfig+0x104>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00f      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a26      	ldr	r2, [pc, #152]	@ (8003c98 <TIM_Base_SetConfig+0x108>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a25      	ldr	r2, [pc, #148]	@ (8003c9c <TIM_Base_SetConfig+0x10c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ca0 <TIM_Base_SetConfig+0x110>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a23      	ldr	r2, [pc, #140]	@ (8003ca4 <TIM_Base_SetConfig+0x114>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a0e      	ldr	r2, [pc, #56]	@ (8003c8c <TIM_Base_SetConfig+0xfc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d103      	bne.n	8003c60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800

08003ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f023 0201 	bic.w	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 030a 	bic.w	r3, r3, #10
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b087      	sub	sp, #28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f023 0210 	bic.w	r2, r3, #16
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	031b      	lsls	r3, r3, #12
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b085      	sub	sp, #20
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f043 0307 	orr.w	r3, r3, #7
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	609a      	str	r2, [r3, #8]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	021a      	lsls	r2, r3, #8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e050      	b.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d018      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e40:	d013      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a18      	ldr	r2, [pc, #96]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00e      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a16      	ldr	r2, [pc, #88]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a13      	ldr	r2, [pc, #76]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10c      	bne.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000

08003eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f103 0208 	add.w	r2, r3, #8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f103 0208 	add.w	r2, r3, #8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0208 	add.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d103      	bne.n	8003f5a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e00c      	b.n	8003f74 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e002      	b.n	8003f68 <vListInsert+0x2e>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d2f6      	bcs.n	8003f62 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6892      	ldr	r2, [r2, #8]
 8003fc2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6852      	ldr	r2, [r2, #4]
 8003fcc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d103      	bne.n	8003fe0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1e5a      	subs	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800400a:	2301      	movs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <xQueueGenericReset+0x30>
        __asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
    }
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d05d      	beq.n	80040f2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800403a:	2b00      	cmp	r3, #0
 800403c:	d059      	beq.n	80040f2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	2100      	movs	r1, #0
 8004048:	fba3 2302 	umull	r2, r3, r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d000      	beq.n	8004052 <xQueueGenericReset+0x52>
 8004050:	2101      	movs	r1, #1
 8004052:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004054:	2b00      	cmp	r3, #0
 8004056:	d14c      	bne.n	80040f2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8004058:	f002 f820 	bl	800609c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	6939      	ldr	r1, [r7, #16]
 8004066:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	441a      	add	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2200      	movs	r2, #0
 8004076:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	3b01      	subs	r3, #1
 800408a:	6939      	ldr	r1, [r7, #16]
 800408c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	441a      	add	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	22ff      	movs	r2, #255	@ 0xff
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	22ff      	movs	r2, #255	@ 0xff
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d114      	bne.n	80040d8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3310      	adds	r3, #16
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 f8d4 	bl	8005268 <xTaskRemoveFromEventList>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80040c6:	4b16      	ldr	r3, [pc, #88]	@ (8004120 <xQueueGenericReset+0x120>)
 80040c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	e009      	b.n	80040ec <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	3310      	adds	r3, #16
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff feff 	bl	8003ee0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3324      	adds	r3, #36	@ 0x24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fefa 	bl	8003ee0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80040ec:	f002 f808 	bl	8006100 <vPortExitCritical>
 80040f0:	e001      	b.n	80040f6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <xQueueGenericReset+0x114>
        __asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60bb      	str	r3, [r7, #8]
    }
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004114:	697b      	ldr	r3, [r7, #20]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	@ 0x28
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02e      	beq.n	800419a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800413c:	2100      	movs	r1, #0
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d000      	beq.n	800414c <xQueueGenericCreate+0x28>
 800414a:	2101      	movs	r1, #1
 800414c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d123      	bne.n	800419a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800415a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800415e:	d81c      	bhi.n	800419a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	3350      	adds	r3, #80	@ 0x50
 800416e:	4618      	mov	r0, r3
 8004170:	f002 f87c 	bl	800626c <pvPortMalloc>
 8004174:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01d      	beq.n	80041b8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3350      	adds	r3, #80	@ 0x50
 8004184:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004186:	79fa      	ldrb	r2, [r7, #7]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f815 	bl	80041c2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004198:	e00e      	b.n	80041b8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <xQueueGenericCreate+0x94>
        __asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	613b      	str	r3, [r7, #16]
    }
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	e7fd      	b.n	80041b4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80041b8:	69fb      	ldr	r3, [r7, #28]
    }
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d103      	bne.n	80041de <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e002      	b.n	80041e4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041f0:	2101      	movs	r1, #1
 80041f2:	69b8      	ldr	r0, [r7, #24]
 80041f4:	f7ff ff04 	bl	8004000 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	@ 0x38
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004216:	2300      	movs	r3, #0
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10b      	bne.n	800423c <xQueueGenericSend+0x34>
        __asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <xQueueGenericSend+0x42>
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <xQueueGenericSend+0x46>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <xQueueGenericSend+0x48>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <xQueueGenericSend+0x64>
        __asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d103      	bne.n	800427a <xQueueGenericSend+0x72>
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <xQueueGenericSend+0x76>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <xQueueGenericSend+0x78>
 800427e:	2300      	movs	r3, #0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <xQueueGenericSend+0x94>
        __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	623b      	str	r3, [r7, #32]
    }
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800429c:	f001 f9f8 	bl	8005690 <xTaskGetSchedulerState>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <xQueueGenericSend+0xa4>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <xQueueGenericSend+0xa8>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <xQueueGenericSend+0xaa>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <xQueueGenericSend+0xc6>
        __asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	61fb      	str	r3, [r7, #28]
    }
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80042ce:	f001 fee5 	bl	800609c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <xQueueGenericSend+0xdc>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d129      	bne.n	8004338 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ea:	f000 f971 	bl	80045d0 <prvCopyDataToQueue>
 80042ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	3324      	adds	r3, #36	@ 0x24
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 ffb3 	bl	8005268 <xTaskRemoveFromEventList>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004308:	4b3f      	ldr	r3, [pc, #252]	@ (8004408 <xQueueGenericSend+0x200>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	e00a      	b.n	8004330 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004320:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <xQueueGenericSend+0x200>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004330:	f001 fee6 	bl	8006100 <vPortExitCritical>
                return pdPASS;
 8004334:	2301      	movs	r3, #1
 8004336:	e063      	b.n	8004400 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800433e:	f001 fedf 	bl	8006100 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004342:	2300      	movs	r3, #0
 8004344:	e05c      	b.n	8004400 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f861 	bl	8005418 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004356:	2301      	movs	r3, #1
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800435a:	f001 fed1 	bl	8006100 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800435e:	f000 fc89 	bl	8004c74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004362:	f001 fe9b 	bl	800609c <vPortEnterCritical>
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800436c:	b25b      	sxtb	r3, r3
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d103      	bne.n	800437c <xQueueGenericSend+0x174>
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004382:	b25b      	sxtb	r3, r3
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d103      	bne.n	8004392 <xQueueGenericSend+0x18a>
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004392:	f001 feb5 	bl	8006100 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004396:	1d3a      	adds	r2, r7, #4
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f850 	bl	8005444 <xTaskCheckForTimeOut>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d124      	bne.n	80043f4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ac:	f000 fa08 	bl	80047c0 <prvIsQueueFull>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	3310      	adds	r3, #16
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fee6 	bl	8005190 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80043c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043c6:	f000 f993 	bl	80046f0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80043ca:	f000 fc61 	bl	8004c90 <xTaskResumeAll>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f af7c 	bne.w	80042ce <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80043d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <xQueueGenericSend+0x200>)
 80043d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	e772      	b.n	80042ce <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80043e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043ea:	f000 f981 	bl	80046f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80043ee:	f000 fc4f 	bl	8004c90 <xTaskResumeAll>
 80043f2:	e76c      	b.n	80042ce <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80043f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043f6:	f000 f97b 	bl	80046f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80043fa:	f000 fc49 	bl	8004c90 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80043fe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004400:	4618      	mov	r0, r3
 8004402:	3738      	adds	r7, #56	@ 0x38
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	@ 0x30
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <xQueueReceive+0x32>
        __asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	623b      	str	r3, [r7, #32]
    }
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	e7fd      	b.n	800443a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <xQueueReceive+0x40>
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueReceive+0x44>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueReceive+0x46>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <xQueueReceive+0x62>
        __asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
    }
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800446e:	f001 f90f 	bl	8005690 <xTaskGetSchedulerState>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d102      	bne.n	800447e <xQueueReceive+0x72>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <xQueueReceive+0x76>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <xQueueReceive+0x78>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10b      	bne.n	80044a0 <xQueueReceive+0x94>
        __asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	61bb      	str	r3, [r7, #24]
    }
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80044a0:	f001 fdfc 	bl	800609c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01f      	beq.n	80044f0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044b4:	f000 f8f6 	bl	80046a4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00f      	beq.n	80044e8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	3310      	adds	r3, #16
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fecb 	bl	8005268 <xTaskRemoveFromEventList>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80044d8:	4b3c      	ldr	r3, [pc, #240]	@ (80045cc <xQueueReceive+0x1c0>)
 80044da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80044e8:	f001 fe0a 	bl	8006100 <vPortExitCritical>
                return pdPASS;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e069      	b.n	80045c4 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80044f6:	f001 fe03 	bl	8006100 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e062      	b.n	80045c4 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80044fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	4618      	mov	r0, r3
 800450a:	f000 ff85 	bl	8005418 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800450e:	2301      	movs	r3, #1
 8004510:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004512:	f001 fdf5 	bl	8006100 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004516:	f000 fbad 	bl	8004c74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800451a:	f001 fdbf 	bl	800609c <vPortEnterCritical>
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004524:	b25b      	sxtb	r3, r3
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d103      	bne.n	8004534 <xQueueReceive+0x128>
 800452c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800453a:	b25b      	sxtb	r3, r3
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d103      	bne.n	800454a <xQueueReceive+0x13e>
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800454a:	f001 fdd9 	bl	8006100 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800454e:	1d3a      	adds	r2, r7, #4
 8004550:	f107 0310 	add.w	r3, r7, #16
 8004554:	4611      	mov	r1, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ff74 	bl	8005444 <xTaskCheckForTimeOut>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d123      	bne.n	80045aa <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004564:	f000 f916 	bl	8004794 <prvIsQueueEmpty>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d017      	beq.n	800459e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	3324      	adds	r3, #36	@ 0x24
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fe0a 	bl	8005190 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800457c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800457e:	f000 f8b7 	bl	80046f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004582:	f000 fb85 	bl	8004c90 <xTaskResumeAll>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d189      	bne.n	80044a0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800458c:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <xQueueReceive+0x1c0>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	e780      	b.n	80044a0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800459e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045a0:	f000 f8a6 	bl	80046f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045a4:	f000 fb74 	bl	8004c90 <xTaskResumeAll>
 80045a8:	e77a      	b.n	80044a0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80045aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ac:	f000 f8a0 	bl	80046f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045b0:	f000 fb6e 	bl	8004c90 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045b6:	f000 f8ed 	bl	8004794 <prvIsQueueEmpty>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f43f af6f 	beq.w	80044a0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80045c2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3730      	adds	r7, #48	@ 0x30
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d14d      	bne.n	8004692 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 f866 	bl	80056cc <xTaskPriorityDisinherit>
 8004600:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	e043      	b.n	8004692 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d119      	bne.n	8004644 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6858      	ldr	r0, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	461a      	mov	r2, r3
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	f002 f844 	bl	80066a8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	441a      	add	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d32b      	bcc.n	8004692 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	e026      	b.n	8004692 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68d8      	ldr	r0, [r3, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	461a      	mov	r2, r3
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	f002 f82a 	bl	80066a8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	425b      	negs	r3, r3
 800465e:	441a      	add	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d207      	bcs.n	8004680 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	425b      	negs	r3, r3
 800467a:	441a      	add	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d105      	bne.n	8004692 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3b01      	subs	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800469a:	697b      	ldr	r3, [r7, #20]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	441a      	add	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d303      	bcc.n	80046d8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68d9      	ldr	r1, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	461a      	mov	r2, r3
 80046e2:	6838      	ldr	r0, [r7, #0]
 80046e4:	f001 ffe0 	bl	80066a8 <memcpy>
    }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80046f8:	f001 fcd0 	bl	800609c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004702:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004704:	e011      	b.n	800472a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d012      	beq.n	8004734 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3324      	adds	r3, #36	@ 0x24
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fda8 	bl	8005268 <xTaskRemoveFromEventList>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800471e:	f000 fef9 	bl	8005514 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	3b01      	subs	r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800472a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	dce9      	bgt.n	8004706 <prvUnlockQueue+0x16>
 8004732:	e000      	b.n	8004736 <prvUnlockQueue+0x46>
                    break;
 8004734:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	22ff      	movs	r2, #255	@ 0xff
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800473e:	f001 fcdf 	bl	8006100 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004742:	f001 fcab 	bl	800609c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800474c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800474e:	e011      	b.n	8004774 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d012      	beq.n	800477e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3310      	adds	r3, #16
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fd83 	bl	8005268 <xTaskRemoveFromEventList>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004768:	f000 fed4 	bl	8005514 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800476c:	7bbb      	ldrb	r3, [r7, #14]
 800476e:	3b01      	subs	r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004778:	2b00      	cmp	r3, #0
 800477a:	dce9      	bgt.n	8004750 <prvUnlockQueue+0x60>
 800477c:	e000      	b.n	8004780 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800477e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	22ff      	movs	r2, #255	@ 0xff
 8004784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004788:	f001 fcba 	bl	8006100 <vPortExitCritical>
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800479c:	f001 fc7e 	bl	800609c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e001      	b.n	80047b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80047b2:	f001 fca5 	bl	8006100 <vPortExitCritical>

    return xReturn;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80047c8:	f001 fc68 	bl	800609c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d102      	bne.n	80047de <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e001      	b.n	80047e2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80047e2:	f001 fc8d 	bl	8006100 <vPortExitCritical>

    return xReturn;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <vQueueAddToRegistry+0x2c>
        __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
    }
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d024      	beq.n	800486c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e01e      	b.n	8004866 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <vQueueAddToRegistry+0x9c>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d105      	bne.n	8004844 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4a13      	ldr	r2, [pc, #76]	@ (800488c <vQueueAddToRegistry+0x9c>)
 800483e:	4413      	add	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
                    break;
 8004842:	e013      	b.n	800486c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <vQueueAddToRegistry+0x70>
 800484a:	4a10      	ldr	r2, [pc, #64]	@ (800488c <vQueueAddToRegistry+0x9c>)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4a0c      	ldr	r2, [pc, #48]	@ (800488c <vQueueAddToRegistry+0x9c>)
 800485c:	4413      	add	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	3301      	adds	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b07      	cmp	r3, #7
 800486a:	d9dd      	bls.n	8004828 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	200005a4 	.word	0x200005a4

08004890 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80048a0:	f001 fbfc 	bl	800609c <vPortEnterCritical>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d103      	bne.n	80048ba <vQueueWaitForMessageRestricted+0x2a>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048c0:	b25b      	sxtb	r3, r3
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d103      	bne.n	80048d0 <vQueueWaitForMessageRestricted+0x40>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048d0:	f001 fc16 	bl	8006100 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	3324      	adds	r3, #36	@ 0x24
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fc79 	bl	80051dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff00 	bl	80046f0 <prvUnlockQueue>
    }
 80048f0:	bf00      	nop
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08c      	sub	sp, #48	@ 0x30
 80048fc:	af04      	add	r7, sp, #16
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fcad 	bl	800626c <pvPortMalloc>
 8004912:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d013      	beq.n	8004942 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800491a:	2058      	movs	r0, #88	@ 0x58
 800491c:	f001 fca6 	bl	800626c <pvPortMalloc>
 8004920:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004928:	2258      	movs	r2, #88	@ 0x58
 800492a:	2100      	movs	r1, #0
 800492c:	69f8      	ldr	r0, [r7, #28]
 800492e:	f001 fe8d 	bl	800664c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	631a      	str	r2, [r3, #48]	@ 0x30
 8004938:	e005      	b.n	8004946 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800493a:	6978      	ldr	r0, [r7, #20]
 800493c:	f001 fd52 	bl	80063e4 <vPortFree>
 8004940:	e001      	b.n	8004946 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	2300      	movs	r3, #0
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f80e 	bl	8004984 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004968:	69f8      	ldr	r0, [r7, #28]
 800496a:	f000 f89b 	bl	8004aa4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800496e:	2301      	movs	r3, #1
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e002      	b.n	800497a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800497a:	69bb      	ldr	r3, [r7, #24]
    }
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	461a      	mov	r2, r3
 800499c:	21a5      	movs	r1, #165	@ 0xa5
 800499e:	f001 fe55 	bl	800664c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049ac:	3b01      	subs	r3, #1
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <prvInitialiseNewTask+0x5a>
        __asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	617b      	str	r3, [r7, #20]
    }
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01e      	beq.n	8004a22 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e012      	b.n	8004a10 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	4413      	add	r3, r2
 80049f0:	7819      	ldrb	r1, [r3, #0]
 80049f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	3334      	adds	r3, #52	@ 0x34
 80049fa:	460a      	mov	r2, r1
 80049fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d9e9      	bls.n	80049ea <prvInitialiseNewTask+0x66>
 8004a16:	e000      	b.n	8004a1a <prvInitialiseNewTask+0x96>
            {
                break;
 8004a18:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d90b      	bls.n	8004a40 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	613b      	str	r3, [r7, #16]
    }
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d901      	bls.n	8004a4a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a46:	2304      	movs	r3, #4
 8004a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a54:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fa60 	bl	8003f20 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a62:	3318      	adds	r3, #24
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff fa5b 	bl	8003f20 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	f1c3 0205 	rsb	r2, r3, #5
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a7e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f001 f9d3 	bl	8005e30 <pxPortInitialiseStack>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a9c:	bf00      	nop
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004aac:	f001 faf6 	bl	800609c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004ab0:	4b40      	ldr	r3, [pc, #256]	@ (8004bb4 <prvAddNewTaskToReadyList+0x110>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb4 <prvAddNewTaskToReadyList+0x110>)
 8004ab8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004aba:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb8 <prvAddNewTaskToReadyList+0x114>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8004bb8 <prvAddNewTaskToReadyList+0x114>)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb4 <prvAddNewTaskToReadyList+0x110>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d110      	bne.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004ad0:	f000 fd44 	bl	800555c <prvInitialiseTaskLists>
 8004ad4:	e00d      	b.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004ad6:	4b39      	ldr	r3, [pc, #228]	@ (8004bbc <prvAddNewTaskToReadyList+0x118>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ade:	4b36      	ldr	r3, [pc, #216]	@ (8004bb8 <prvAddNewTaskToReadyList+0x114>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d802      	bhi.n	8004af2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004aec:	4a32      	ldr	r2, [pc, #200]	@ (8004bb8 <prvAddNewTaskToReadyList+0x114>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004af2:	4b33      	ldr	r3, [pc, #204]	@ (8004bc0 <prvAddNewTaskToReadyList+0x11c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	4a31      	ldr	r2, [pc, #196]	@ (8004bc0 <prvAddNewTaskToReadyList+0x11c>)
 8004afa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004afc:	4b30      	ldr	r3, [pc, #192]	@ (8004bc0 <prvAddNewTaskToReadyList+0x11c>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc4 <prvAddNewTaskToReadyList+0x120>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc4 <prvAddNewTaskToReadyList+0x120>)
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1a:	492b      	ldr	r1, [pc, #172]	@ (8004bc8 <prvAddNewTaskToReadyList+0x124>)
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	3304      	adds	r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	3204      	adds	r2, #4
 8004b42:	605a      	str	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc8 <prvAddNewTaskToReadyList+0x124>)
 8004b5a:	441a      	add	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	615a      	str	r2, [r3, #20]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b64:	4918      	ldr	r1, [pc, #96]	@ (8004bc8 <prvAddNewTaskToReadyList+0x124>)
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	4814      	ldr	r0, [pc, #80]	@ (8004bc8 <prvAddNewTaskToReadyList+0x124>)
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4403      	add	r3, r0
 8004b80:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004b82:	f001 fabd 	bl	8006100 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <prvAddNewTaskToReadyList+0x118>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <prvAddNewTaskToReadyList+0x114>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d207      	bcs.n	8004bac <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <prvAddNewTaskToReadyList+0x128>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200006bc 	.word	0x200006bc
 8004bb8:	200005e4 	.word	0x200005e4
 8004bbc:	200006c8 	.word	0x200006c8
 8004bc0:	200006d8 	.word	0x200006d8
 8004bc4:	200006c4 	.word	0x200006c4
 8004bc8:	200005e8 	.word	0x200005e8
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004bd6:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <vTaskStartScheduler+0x88>)
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2300      	movs	r3, #0
 8004be0:	2282      	movs	r2, #130	@ 0x82
 8004be2:	491e      	ldr	r1, [pc, #120]	@ (8004c5c <vTaskStartScheduler+0x8c>)
 8004be4:	481e      	ldr	r0, [pc, #120]	@ (8004c60 <vTaskStartScheduler+0x90>)
 8004be6:	f7ff fe87 	bl	80048f8 <xTaskCreate>
 8004bea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d102      	bne.n	8004bf8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004bf2:	f000 fe91 	bl	8005918 <xTimerCreateTimerTask>
 8004bf6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d116      	bne.n	8004c2c <vTaskStartScheduler+0x5c>
        __asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	60bb      	str	r3, [r7, #8]
    }
 8004c10:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004c12:	4b14      	ldr	r3, [pc, #80]	@ (8004c64 <vTaskStartScheduler+0x94>)
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004c1a:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <vTaskStartScheduler+0x98>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c20:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <vTaskStartScheduler+0x9c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004c26:	f001 f995 	bl	8005f54 <xPortStartScheduler>
 8004c2a:	e00f      	b.n	8004c4c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d10b      	bne.n	8004c4c <vTaskStartScheduler+0x7c>
        __asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	607b      	str	r3, [r7, #4]
    }
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004c4c:	4b08      	ldr	r3, [pc, #32]	@ (8004c70 <vTaskStartScheduler+0xa0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200006e0 	.word	0x200006e0
 8004c5c:	08006f98 	.word	0x08006f98
 8004c60:	0800552d 	.word	0x0800552d
 8004c64:	200006dc 	.word	0x200006dc
 8004c68:	200006c8 	.word	0x200006c8
 8004c6c:	200006c0 	.word	0x200006c0
 8004c70:	2000001c 	.word	0x2000001c

08004c74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004c78:	4b04      	ldr	r3, [pc, #16]	@ (8004c8c <vTaskSuspendAll+0x18>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	4a03      	ldr	r2, [pc, #12]	@ (8004c8c <vTaskSuspendAll+0x18>)
 8004c80:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	200006e4 	.word	0x200006e4

08004c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004c9e:	4b71      	ldr	r3, [pc, #452]	@ (8004e64 <xTaskResumeAll+0x1d4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <xTaskResumeAll+0x2e>
        __asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	607b      	str	r3, [r7, #4]
    }
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004cbe:	f001 f9ed 	bl	800609c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004cc2:	4b68      	ldr	r3, [pc, #416]	@ (8004e64 <xTaskResumeAll+0x1d4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	4a66      	ldr	r2, [pc, #408]	@ (8004e64 <xTaskResumeAll+0x1d4>)
 8004cca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ccc:	4b65      	ldr	r3, [pc, #404]	@ (8004e64 <xTaskResumeAll+0x1d4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 80c0 	bne.w	8004e56 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cd6:	4b64      	ldr	r3, [pc, #400]	@ (8004e68 <xTaskResumeAll+0x1d8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80bb 	beq.w	8004e56 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ce0:	e08a      	b.n	8004df8 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce2:	4b62      	ldr	r3, [pc, #392]	@ (8004e6c <xTaskResumeAll+0x1dc>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	6a12      	ldr	r2, [r2, #32]
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	69d2      	ldr	r2, [r2, #28]
 8004d02:	605a      	str	r2, [r3, #4]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d103      	bne.n	8004d18 <xTaskResumeAll+0x88>
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1e5a      	subs	r2, r3, #1
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	68d2      	ldr	r2, [r2, #12]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	6892      	ldr	r2, [r2, #8]
 8004d40:	605a      	str	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d103      	bne.n	8004d56 <xTaskResumeAll+0xc6>
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	605a      	str	r2, [r3, #4]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	615a      	str	r2, [r3, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	1e5a      	subs	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	4b40      	ldr	r3, [pc, #256]	@ (8004e70 <xTaskResumeAll+0x1e0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	4a3e      	ldr	r2, [pc, #248]	@ (8004e70 <xTaskResumeAll+0x1e0>)
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7c:	493d      	ldr	r1, [pc, #244]	@ (8004e74 <xTaskResumeAll+0x1e4>)
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3304      	adds	r3, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	60da      	str	r2, [r3, #12]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	3204      	adds	r2, #4
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	1d1a      	adds	r2, r3, #4
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4a2e      	ldr	r2, [pc, #184]	@ (8004e74 <xTaskResumeAll+0x1e4>)
 8004dbc:	441a      	add	r2, r3
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	615a      	str	r2, [r3, #20]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc6:	492b      	ldr	r1, [pc, #172]	@ (8004e74 <xTaskResumeAll+0x1e4>)
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	1c59      	adds	r1, r3, #1
 8004dd6:	4827      	ldr	r0, [pc, #156]	@ (8004e74 <xTaskResumeAll+0x1e4>)
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4403      	add	r3, r0
 8004de2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de8:	4b23      	ldr	r3, [pc, #140]	@ (8004e78 <xTaskResumeAll+0x1e8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8004df2:	4b22      	ldr	r3, [pc, #136]	@ (8004e7c <xTaskResumeAll+0x1ec>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004df8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e6c <xTaskResumeAll+0x1dc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f47f af70 	bne.w	8004ce2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004e08:	f000 fc26 	bl	8005658 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004e80 <xTaskResumeAll+0x1f0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004e18:	f000 f846 	bl	8004ea8 <xTaskIncrementTick>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8004e22:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <xTaskResumeAll+0x1ec>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f1      	bne.n	8004e18 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <xTaskResumeAll+0x1f0>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004e3a:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <xTaskResumeAll+0x1ec>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004e46:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <xTaskResumeAll+0x1f4>)
 8004e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004e56:	f001 f953 	bl	8006100 <vPortExitCritical>

    return xAlreadyYielded;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200006e4 	.word	0x200006e4
 8004e68:	200006bc 	.word	0x200006bc
 8004e6c:	2000067c 	.word	0x2000067c
 8004e70:	200006c4 	.word	0x200006c4
 8004e74:	200005e8 	.word	0x200005e8
 8004e78:	200005e4 	.word	0x200005e4
 8004e7c:	200006d0 	.word	0x200006d0
 8004e80:	200006cc 	.word	0x200006cc
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004e8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <xTaskGetTickCount+0x1c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004e94:	687b      	ldr	r3, [r7, #4]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	200006c0 	.word	0x200006c0

08004ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	@ 0x28
 8004eac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80050ac <xTaskIncrementTick+0x204>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 80ed 	bne.w	8005096 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ebc:	4b7c      	ldr	r3, [pc, #496]	@ (80050b0 <xTaskIncrementTick+0x208>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004ec4:	4a7a      	ldr	r2, [pc, #488]	@ (80050b0 <xTaskIncrementTick+0x208>)
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d121      	bne.n	8004f14 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004ed0:	4b78      	ldr	r3, [pc, #480]	@ (80050b4 <xTaskIncrementTick+0x20c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <xTaskIncrementTick+0x4a>
        __asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	607b      	str	r3, [r7, #4]
    }
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <xTaskIncrementTick+0x46>
 8004ef2:	4b70      	ldr	r3, [pc, #448]	@ (80050b4 <xTaskIncrementTick+0x20c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80050b8 <xTaskIncrementTick+0x210>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a6d      	ldr	r2, [pc, #436]	@ (80050b4 <xTaskIncrementTick+0x20c>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4a6d      	ldr	r2, [pc, #436]	@ (80050b8 <xTaskIncrementTick+0x210>)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b6d      	ldr	r3, [pc, #436]	@ (80050bc <xTaskIncrementTick+0x214>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80050bc <xTaskIncrementTick+0x214>)
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	f000 fba2 	bl	8005658 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f14:	4b6a      	ldr	r3, [pc, #424]	@ (80050c0 <xTaskIncrementTick+0x218>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6a3a      	ldr	r2, [r7, #32]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	f0c0 80a6 	bcc.w	800506c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f20:	4b64      	ldr	r3, [pc, #400]	@ (80050b4 <xTaskIncrementTick+0x20c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2a:	4b65      	ldr	r3, [pc, #404]	@ (80050c0 <xTaskIncrementTick+0x218>)
 8004f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f30:	601a      	str	r2, [r3, #0]
                    break;
 8004f32:	e09b      	b.n	800506c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f34:	4b5f      	ldr	r3, [pc, #380]	@ (80050b4 <xTaskIncrementTick+0x20c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d203      	bcs.n	8004f54 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80050c0 <xTaskIncrementTick+0x218>)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004f52:	e08b      	b.n	800506c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	68d2      	ldr	r2, [r2, #12]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	6892      	ldr	r2, [r2, #8]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	3304      	adds	r3, #4
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d103      	bne.n	8004f82 <xTaskIncrementTick+0xda>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2200      	movs	r2, #0
 8004f86:	615a      	str	r2, [r3, #20]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01e      	beq.n	8004fd8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	6a12      	ldr	r2, [r2, #32]
 8004fa8:	609a      	str	r2, [r3, #8]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	69d2      	ldr	r2, [r2, #28]
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	3318      	adds	r3, #24
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d103      	bne.n	8004fc8 <xTaskIncrementTick+0x120>
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6a1a      	ldr	r2, [r3, #32]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	1e5a      	subs	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	4b38      	ldr	r3, [pc, #224]	@ (80050c4 <xTaskIncrementTick+0x21c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	4a37      	ldr	r2, [pc, #220]	@ (80050c4 <xTaskIncrementTick+0x21c>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	4936      	ldr	r1, [pc, #216]	@ (80050c8 <xTaskIncrementTick+0x220>)
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	3204      	adds	r2, #4
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4a26      	ldr	r2, [pc, #152]	@ (80050c8 <xTaskIncrementTick+0x220>)
 800502e:	441a      	add	r2, r3
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	615a      	str	r2, [r3, #20]
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005038:	4923      	ldr	r1, [pc, #140]	@ (80050c8 <xTaskIncrementTick+0x220>)
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	1c59      	adds	r1, r3, #1
 8005048:	481f      	ldr	r0, [pc, #124]	@ (80050c8 <xTaskIncrementTick+0x220>)
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4403      	add	r3, r0
 8005054:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505a:	4b1c      	ldr	r3, [pc, #112]	@ (80050cc <xTaskIncrementTick+0x224>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	429a      	cmp	r2, r3
 8005062:	f67f af5d 	bls.w	8004f20 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800506a:	e759      	b.n	8004f20 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800506c:	4b17      	ldr	r3, [pc, #92]	@ (80050cc <xTaskIncrementTick+0x224>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005072:	4915      	ldr	r1, [pc, #84]	@ (80050c8 <xTaskIncrementTick+0x220>)
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d901      	bls.n	8005088 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005088:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <xTaskIncrementTick+0x228>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
 8005094:	e004      	b.n	80050a0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005096:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <xTaskIncrementTick+0x22c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	4a0d      	ldr	r2, [pc, #52]	@ (80050d4 <xTaskIncrementTick+0x22c>)
 800509e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3728      	adds	r7, #40	@ 0x28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200006e4 	.word	0x200006e4
 80050b0:	200006c0 	.word	0x200006c0
 80050b4:	20000674 	.word	0x20000674
 80050b8:	20000678 	.word	0x20000678
 80050bc:	200006d4 	.word	0x200006d4
 80050c0:	200006dc 	.word	0x200006dc
 80050c4:	200006c4 	.word	0x200006c4
 80050c8:	200005e8 	.word	0x200005e8
 80050cc:	200005e4 	.word	0x200005e4
 80050d0:	200006d0 	.word	0x200006d0
 80050d4:	200006cc 	.word	0x200006cc

080050d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050de:	4b27      	ldr	r3, [pc, #156]	@ (800517c <vTaskSwitchContext+0xa4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80050e6:	4b26      	ldr	r3, [pc, #152]	@ (8005180 <vTaskSwitchContext+0xa8>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80050ec:	e040      	b.n	8005170 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80050ee:	4b24      	ldr	r3, [pc, #144]	@ (8005180 <vTaskSwitchContext+0xa8>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f4:	4b23      	ldr	r3, [pc, #140]	@ (8005184 <vTaskSwitchContext+0xac>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	fab3 f383 	clz	r3, r3
 8005100:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	f1c3 031f 	rsb	r3, r3, #31
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	491f      	ldr	r1, [pc, #124]	@ (8005188 <vTaskSwitchContext+0xb0>)
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <vTaskSwitchContext+0x5e>
        __asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
    }
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <vTaskSwitchContext+0x5a>
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4a11      	ldr	r2, [pc, #68]	@ (8005188 <vTaskSwitchContext+0xb0>)
 8005142:	4413      	add	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	3308      	adds	r3, #8
 8005158:	429a      	cmp	r2, r3
 800515a:	d104      	bne.n	8005166 <vTaskSwitchContext+0x8e>
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a07      	ldr	r2, [pc, #28]	@ (800518c <vTaskSwitchContext+0xb4>)
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	200006e4 	.word	0x200006e4
 8005180:	200006d0 	.word	0x200006d0
 8005184:	200006c4 	.word	0x200006c4
 8005188:	200005e8 	.word	0x200005e8
 800518c:	200005e4 	.word	0x200005e4

08005190 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60fb      	str	r3, [r7, #12]
    }
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051b8:	4b07      	ldr	r3, [pc, #28]	@ (80051d8 <vTaskPlaceOnEventList+0x48>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3318      	adds	r3, #24
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fe feba 	bl	8003f3a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051c6:	2101      	movs	r1, #1
 80051c8:	6838      	ldr	r0, [r7, #0]
 80051ca:	f000 fb25 	bl	8005818 <prvAddCurrentTaskToDelayedList>
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	200005e4 	.word	0x200005e4

080051dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	613b      	str	r3, [r7, #16]
    }
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <vTaskPlaceOnEventListRestricted+0x88>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	61da      	str	r2, [r3, #28]
 8005214:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <vTaskPlaceOnEventListRestricted+0x88>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6892      	ldr	r2, [r2, #8]
 800521c:	621a      	str	r2, [r3, #32]
 800521e:	4b11      	ldr	r3, [pc, #68]	@ (8005264 <vTaskPlaceOnEventListRestricted+0x88>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	3218      	adds	r2, #24
 8005228:	605a      	str	r2, [r3, #4]
 800522a:	4b0e      	ldr	r3, [pc, #56]	@ (8005264 <vTaskPlaceOnEventListRestricted+0x88>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f103 0218 	add.w	r2, r3, #24
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <vTaskPlaceOnEventListRestricted+0x88>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	629a      	str	r2, [r3, #40]	@ 0x28
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
 8005252:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	68b8      	ldr	r0, [r7, #8]
 8005258:	f000 fade 	bl	8005818 <prvAddCurrentTaskToDelayedList>
    }
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	200005e4 	.word	0x200005e4

08005268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005268:	b480      	push	{r7}
 800526a:	b08b      	sub	sp, #44	@ 0x2c
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
    }
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	6a3a      	ldr	r2, [r7, #32]
 80052a2:	6a12      	ldr	r2, [r2, #32]
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	69d2      	ldr	r2, [r2, #28]
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	3318      	adds	r3, #24
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d103      	bne.n	80052c4 <xTaskRemoveFromEventList+0x5c>
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	6a1a      	ldr	r2, [r3, #32]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	1e5a      	subs	r2, r3, #1
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005400 <xTaskRemoveFromEventList+0x198>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d15e      	bne.n	800539a <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	6892      	ldr	r2, [r2, #8]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	3304      	adds	r3, #4
 80052fe:	429a      	cmp	r2, r3
 8005300:	d103      	bne.n	800530a <xTaskRemoveFromEventList+0xa2>
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	2200      	movs	r2, #0
 800530e:	615a      	str	r2, [r3, #20]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	1e5a      	subs	r2, r3, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	2201      	movs	r2, #1
 8005320:	409a      	lsls	r2, r3
 8005322:	4b38      	ldr	r3, [pc, #224]	@ (8005404 <xTaskRemoveFromEventList+0x19c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	4a36      	ldr	r2, [pc, #216]	@ (8005404 <xTaskRemoveFromEventList+0x19c>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005330:	4935      	ldr	r1, [pc, #212]	@ (8005408 <xTaskRemoveFromEventList+0x1a0>)
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3304      	adds	r3, #4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	609a      	str	r2, [r3, #8]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	60da      	str	r2, [r3, #12]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	3204      	adds	r2, #4
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	1d1a      	adds	r2, r3, #4
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	609a      	str	r2, [r3, #8]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4a26      	ldr	r2, [pc, #152]	@ (8005408 <xTaskRemoveFromEventList+0x1a0>)
 8005370:	441a      	add	r2, r3
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	615a      	str	r2, [r3, #20]
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537a:	4923      	ldr	r1, [pc, #140]	@ (8005408 <xTaskRemoveFromEventList+0x1a0>)
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	481f      	ldr	r0, [pc, #124]	@ (8005408 <xTaskRemoveFromEventList+0x1a0>)
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4403      	add	r3, r0
 8005396:	6019      	str	r1, [r3, #0]
 8005398:	e01b      	b.n	80053d2 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800539a:	4b1c      	ldr	r3, [pc, #112]	@ (800540c <xTaskRemoveFromEventList+0x1a4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	61da      	str	r2, [r3, #28]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	621a      	str	r2, [r3, #32]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	3218      	adds	r2, #24
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	f103 0218 	add.w	r2, r3, #24
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	609a      	str	r2, [r3, #8]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	4a11      	ldr	r2, [pc, #68]	@ (800540c <xTaskRemoveFromEventList+0x1a4>)
 80053c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80053c8:	4b10      	ldr	r3, [pc, #64]	@ (800540c <xTaskRemoveFromEventList+0x1a4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a0f      	ldr	r2, [pc, #60]	@ (800540c <xTaskRemoveFromEventList+0x1a4>)
 80053d0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <xTaskRemoveFromEventList+0x1a8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d905      	bls.n	80053ec <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <xTaskRemoveFromEventList+0x1ac>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e001      	b.n	80053f0 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	372c      	adds	r7, #44	@ 0x2c
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	200006e4 	.word	0x200006e4
 8005404:	200006c4 	.word	0x200006c4
 8005408:	200005e8 	.word	0x200005e8
 800540c:	2000067c 	.word	0x2000067c
 8005410:	200005e4 	.word	0x200005e4
 8005414:	200006d0 	.word	0x200006d0

08005418 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005420:	4b06      	ldr	r3, [pc, #24]	@ (800543c <vTaskInternalSetTimeOutState+0x24>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005428:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <vTaskInternalSetTimeOutState+0x28>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	605a      	str	r2, [r3, #4]
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	200006d4 	.word	0x200006d4
 8005440:	200006c0 	.word	0x200006c0

08005444 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	613b      	str	r3, [r7, #16]
    }
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	60fb      	str	r3, [r7, #12]
    }
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800548a:	f000 fe07 	bl	800609c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800548e:	4b1f      	ldr	r3, [pc, #124]	@ (800550c <xTaskCheckForTimeOut+0xc8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d102      	bne.n	80054ae <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e026      	b.n	80054fc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b17      	ldr	r3, [pc, #92]	@ (8005510 <xTaskCheckForTimeOut+0xcc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d00a      	beq.n	80054d0 <xTaskCheckForTimeOut+0x8c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d305      	bcc.n	80054d0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e015      	b.n	80054fc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d20b      	bcs.n	80054f2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad2      	subs	r2, r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff ff96 	bl	8005418 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e004      	b.n	80054fc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80054fc:	f000 fe00 	bl	8006100 <vPortExitCritical>

    return xReturn;
 8005500:	69fb      	ldr	r3, [r7, #28]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	200006c0 	.word	0x200006c0
 8005510:	200006d4 	.word	0x200006d4

08005514 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005518:	4b03      	ldr	r3, [pc, #12]	@ (8005528 <vTaskMissedYield+0x14>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]
}
 800551e:	bf00      	nop
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	200006d0 	.word	0x200006d0

0800552c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005534:	f000 f852 	bl	80055dc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005538:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <prvIdleTask+0x28>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d9f9      	bls.n	8005534 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005540:	4b05      	ldr	r3, [pc, #20]	@ (8005558 <prvIdleTask+0x2c>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005550:	e7f0      	b.n	8005534 <prvIdleTask+0x8>
 8005552:	bf00      	nop
 8005554:	200005e8 	.word	0x200005e8
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005562:	2300      	movs	r3, #0
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	e00c      	b.n	8005582 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4a12      	ldr	r2, [pc, #72]	@ (80055bc <prvInitialiseTaskLists+0x60>)
 8005574:	4413      	add	r3, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fcb2 	bl	8003ee0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3301      	adds	r3, #1
 8005580:	607b      	str	r3, [r7, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b04      	cmp	r3, #4
 8005586:	d9ef      	bls.n	8005568 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005588:	480d      	ldr	r0, [pc, #52]	@ (80055c0 <prvInitialiseTaskLists+0x64>)
 800558a:	f7fe fca9 	bl	8003ee0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800558e:	480d      	ldr	r0, [pc, #52]	@ (80055c4 <prvInitialiseTaskLists+0x68>)
 8005590:	f7fe fca6 	bl	8003ee0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005594:	480c      	ldr	r0, [pc, #48]	@ (80055c8 <prvInitialiseTaskLists+0x6c>)
 8005596:	f7fe fca3 	bl	8003ee0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800559a:	480c      	ldr	r0, [pc, #48]	@ (80055cc <prvInitialiseTaskLists+0x70>)
 800559c:	f7fe fca0 	bl	8003ee0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80055a0:	480b      	ldr	r0, [pc, #44]	@ (80055d0 <prvInitialiseTaskLists+0x74>)
 80055a2:	f7fe fc9d 	bl	8003ee0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80055a6:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <prvInitialiseTaskLists+0x78>)
 80055a8:	4a05      	ldr	r2, [pc, #20]	@ (80055c0 <prvInitialiseTaskLists+0x64>)
 80055aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055ac:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <prvInitialiseTaskLists+0x7c>)
 80055ae:	4a05      	ldr	r2, [pc, #20]	@ (80055c4 <prvInitialiseTaskLists+0x68>)
 80055b0:	601a      	str	r2, [r3, #0]
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	200005e8 	.word	0x200005e8
 80055c0:	2000064c 	.word	0x2000064c
 80055c4:	20000660 	.word	0x20000660
 80055c8:	2000067c 	.word	0x2000067c
 80055cc:	20000690 	.word	0x20000690
 80055d0:	200006a8 	.word	0x200006a8
 80055d4:	20000674 	.word	0x20000674
 80055d8:	20000678 	.word	0x20000678

080055dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055e2:	e019      	b.n	8005618 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80055e4:	f000 fd5a 	bl	800609c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e8:	4b10      	ldr	r3, [pc, #64]	@ (800562c <prvCheckTasksWaitingTermination+0x50>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe fcd9 	bl	8003fac <uxListRemove>
                --uxCurrentNumberOfTasks;
 80055fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005630 <prvCheckTasksWaitingTermination+0x54>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3b01      	subs	r3, #1
 8005600:	4a0b      	ldr	r2, [pc, #44]	@ (8005630 <prvCheckTasksWaitingTermination+0x54>)
 8005602:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005604:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <prvCheckTasksWaitingTermination+0x58>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3b01      	subs	r3, #1
 800560a:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <prvCheckTasksWaitingTermination+0x58>)
 800560c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800560e:	f000 fd77 	bl	8006100 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f810 	bl	8005638 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <prvCheckTasksWaitingTermination+0x58>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e1      	bne.n	80055e4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000690 	.word	0x20000690
 8005630:	200006bc 	.word	0x200006bc
 8005634:	200006a4 	.word	0x200006a4

08005638 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fecd 	bl	80063e4 <vPortFree>
            vPortFree( pxTCB );
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 feca 	bl	80063e4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <prvResetNextTaskUnblockTime+0x30>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005666:	4b09      	ldr	r3, [pc, #36]	@ (800568c <prvResetNextTaskUnblockTime+0x34>)
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800566e:	e005      	b.n	800567c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005670:	4b05      	ldr	r3, [pc, #20]	@ (8005688 <prvResetNextTaskUnblockTime+0x30>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a04      	ldr	r2, [pc, #16]	@ (800568c <prvResetNextTaskUnblockTime+0x34>)
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000674 	.word	0x20000674
 800568c:	200006dc 	.word	0x200006dc

08005690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <xTaskGetSchedulerState+0x34>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800569e:	2301      	movs	r3, #1
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	e008      	b.n	80056b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a4:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <xTaskGetSchedulerState+0x38>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80056ac:	2302      	movs	r3, #2
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	e001      	b.n	80056b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80056b6:	687b      	ldr	r3, [r7, #4]
    }
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	200006c8 	.word	0x200006c8
 80056c8:	200006e4 	.word	0x200006e4

080056cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 808e 	beq.w	8005800 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80056e4:	4b49      	ldr	r3, [pc, #292]	@ (800580c <xTaskPriorityDisinherit+0x140>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d00b      	beq.n	8005706 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	613b      	str	r3, [r7, #16]
    }
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60fb      	str	r3, [r7, #12]
    }
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	e7fd      	b.n	8005722 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572a:	1e5a      	subs	r2, r3, #1
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005738:	429a      	cmp	r2, r3
 800573a:	d061      	beq.n	8005800 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d15d      	bne.n	8005800 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	3304      	adds	r3, #4
 8005748:	4618      	mov	r0, r3
 800574a:	f7fe fc2f 	bl	8003fac <uxListRemove>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	2201      	movs	r2, #1
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43da      	mvns	r2, r3
 8005760:	4b2b      	ldr	r3, [pc, #172]	@ (8005810 <xTaskPriorityDisinherit+0x144>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4013      	ands	r3, r2
 8005766:	4a2a      	ldr	r2, [pc, #168]	@ (8005810 <xTaskPriorityDisinherit+0x144>)
 8005768:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	f1c3 0205 	rsb	r2, r3, #5
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	4b22      	ldr	r3, [pc, #136]	@ (8005810 <xTaskPriorityDisinherit+0x144>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	4a20      	ldr	r2, [pc, #128]	@ (8005810 <xTaskPriorityDisinherit+0x144>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005794:	491f      	ldr	r1, [pc, #124]	@ (8005814 <xTaskPriorityDisinherit+0x148>)
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3304      	adds	r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	3204      	adds	r2, #4
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	609a      	str	r2, [r3, #8]
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a10      	ldr	r2, [pc, #64]	@ (8005814 <xTaskPriorityDisinherit+0x148>)
 80057d4:	441a      	add	r2, r3
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	615a      	str	r2, [r3, #20]
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057de:	490d      	ldr	r1, [pc, #52]	@ (8005814 <xTaskPriorityDisinherit+0x148>)
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	4809      	ldr	r0, [pc, #36]	@ (8005814 <xTaskPriorityDisinherit+0x148>)
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4403      	add	r3, r0
 80057fa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80057fc:	2301      	movs	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005800:	69fb      	ldr	r3, [r7, #28]
    }
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	200005e4 	.word	0x200005e4
 8005810:	200006c4 	.word	0x200006c4
 8005814:	200005e8 	.word	0x200005e8

08005818 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005822:	4b36      	ldr	r3, [pc, #216]	@ (80058fc <prvAddCurrentTaskToDelayedList+0xe4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005828:	4b35      	ldr	r3, [pc, #212]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fbbc 	bl	8003fac <uxListRemove>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800583a:	4b31      	ldr	r3, [pc, #196]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	2201      	movs	r2, #1
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43da      	mvns	r2, r3
 8005848:	4b2e      	ldr	r3, [pc, #184]	@ (8005904 <prvAddCurrentTaskToDelayedList+0xec>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4013      	ands	r3, r2
 800584e:	4a2d      	ldr	r2, [pc, #180]	@ (8005904 <prvAddCurrentTaskToDelayedList+0xec>)
 8005850:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d124      	bne.n	80058a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d021      	beq.n	80058a4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005860:	4b29      	ldr	r3, [pc, #164]	@ (8005908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	4b26      	ldr	r3, [pc, #152]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	609a      	str	r2, [r3, #8]
 800586e:	4b24      	ldr	r3, [pc, #144]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	6892      	ldr	r2, [r2, #8]
 8005876:	60da      	str	r2, [r3, #12]
 8005878:	4b21      	ldr	r3, [pc, #132]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	3204      	adds	r2, #4
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1d1a      	adds	r2, r3, #4
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	4b1c      	ldr	r3, [pc, #112]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1d      	ldr	r2, [pc, #116]	@ (8005908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005894:	615a      	str	r2, [r3, #20]
 8005896:	4b1c      	ldr	r3, [pc, #112]	@ (8005908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	4a1a      	ldr	r2, [pc, #104]	@ (8005908 <prvAddCurrentTaskToDelayedList+0xf0>)
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80058a2:	e026      	b.n	80058f2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058ac:	4b14      	ldr	r3, [pc, #80]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d209      	bcs.n	80058d0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058bc:	4b13      	ldr	r3, [pc, #76]	@ (800590c <prvAddCurrentTaskToDelayedList+0xf4>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f7fe fb36 	bl	8003f3a <vListInsert>
}
 80058ce:	e010      	b.n	80058f2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <prvAddCurrentTaskToDelayedList+0xf8>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7fe fb2c 	bl	8003f3a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d202      	bcs.n	80058f2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80058ec:	4a09      	ldr	r2, [pc, #36]	@ (8005914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6013      	str	r3, [r2, #0]
}
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	200006c0 	.word	0x200006c0
 8005900:	200005e4 	.word	0x200005e4
 8005904:	200006c4 	.word	0x200006c4
 8005908:	200006a8 	.word	0x200006a8
 800590c:	20000678 	.word	0x20000678
 8005910:	20000674 	.word	0x20000674
 8005914:	200006dc 	.word	0x200006dc

08005918 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005922:	f000 fa4f 	bl	8005dc4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005926:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <xTimerCreateTimerTask+0x58>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800592e:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <xTimerCreateTimerTask+0x5c>)
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	2302      	movs	r3, #2
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	2300      	movs	r3, #0
 8005938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800593c:	490e      	ldr	r1, [pc, #56]	@ (8005978 <xTimerCreateTimerTask+0x60>)
 800593e:	480f      	ldr	r0, [pc, #60]	@ (800597c <xTimerCreateTimerTask+0x64>)
 8005940:	f7fe ffda 	bl	80048f8 <xTaskCreate>
 8005944:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	603b      	str	r3, [r7, #0]
    }
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005964:	687b      	ldr	r3, [r7, #4]
    }
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000718 	.word	0x20000718
 8005974:	2000071c 	.word	0x2000071c
 8005978:	08006fa0 	.word	0x08006fa0
 800597c:	08005a25 	.word	0x08005a25

08005980 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800598c:	e008      	b.n	80059a0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4413      	add	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	18d1      	adds	r1, r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f8df 	bl	8005b70 <prvInsertTimerInActiveList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ea      	bne.n	800598e <prvReloadTimer+0xe>
        }
    }
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <prvProcessExpiredTimer+0x5c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fae5 	bl	8003fac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff ffc3 	bl	8005980 <prvReloadTimer>
 80059fa:	e008      	b.n	8005a0e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	4798      	blx	r3
    }
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000710 	.word	0x20000710

08005a24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a2c:	f107 0308 	add.w	r3, r7, #8
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 f859 	bl	8005ae8 <prvGetNextExpireTime>
 8005a36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f805 	bl	8005a4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005a42:	f000 f8d7 	bl	8005bf4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a46:	bf00      	nop
 8005a48:	e7f0      	b.n	8005a2c <prvTimerTask+0x8>
	...

08005a4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005a56:	f7ff f90d 	bl	8004c74 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a5a:	f107 0308 	add.w	r3, r7, #8
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f866 	bl	8005b30 <prvSampleTimeNow>
 8005a64:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d130      	bne.n	8005ace <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <prvProcessTimerOrBlockTask+0x3c>
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d806      	bhi.n	8005a88 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005a7a:	f7ff f909 	bl	8004c90 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff9f 	bl	80059c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005a86:	e024      	b.n	8005ad2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a8e:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <prvProcessTimerOrBlockTask+0x90>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <prvProcessTimerOrBlockTask+0x50>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <prvProcessTimerOrBlockTask+0x52>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae0 <prvProcessTimerOrBlockTask+0x94>)
 8005aa2:	6818      	ldr	r0, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	4619      	mov	r1, r3
 8005aae:	f7fe feef 	bl	8004890 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005ab2:	f7ff f8ed 	bl	8004c90 <xTaskResumeAll>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005abc:	4b09      	ldr	r3, [pc, #36]	@ (8005ae4 <prvProcessTimerOrBlockTask+0x98>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
    }
 8005acc:	e001      	b.n	8005ad2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005ace:	f7ff f8df 	bl	8004c90 <xTaskResumeAll>
    }
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000714 	.word	0x20000714
 8005ae0:	20000718 	.word	0x20000718
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005af0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b2c <prvGetNextExpireTime+0x44>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <prvGetNextExpireTime+0x16>
 8005afa:	2201      	movs	r2, #1
 8005afc:	e000      	b.n	8005b00 <prvGetNextExpireTime+0x18>
 8005afe:	2200      	movs	r2, #0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b0c:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <prvGetNextExpireTime+0x44>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e001      	b.n	8005b1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
    }
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000710 	.word	0x20000710

08005b30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005b38:	f7ff f9a6 	bl	8004e88 <xTaskGetTickCount>
 8005b3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <prvSampleTimeNow+0x3c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d205      	bcs.n	8005b54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005b48:	f000 f916 	bl	8005d78 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005b5a:	4a04      	ldr	r2, [pc, #16]	@ (8005b6c <prvSampleTimeNow+0x3c>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005b60:	68fb      	ldr	r3, [r7, #12]
    }
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000720 	.word	0x20000720

08005b70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d812      	bhi.n	8005bbc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e01b      	b.n	8005be2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005baa:	4b10      	ldr	r3, [pc, #64]	@ (8005bec <prvInsertTimerInActiveList+0x7c>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f7fe f9c0 	bl	8003f3a <vListInsert>
 8005bba:	e012      	b.n	8005be2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d206      	bcs.n	8005bd2 <prvInsertTimerInActiveList+0x62>
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d302      	bcc.n	8005bd2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e007      	b.n	8005be2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bd2:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <prvInsertTimerInActiveList+0x80>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f7fe f9ac 	bl	8003f3a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005be2:	697b      	ldr	r3, [r7, #20]
    }
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000714 	.word	0x20000714
 8005bf0:	20000710 	.word	0x20000710

08005bf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bfa:	e0a9      	b.n	8005d50 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f2c0 80a6 	blt.w	8005d50 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe f9c9 	bl	8003fac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff ff87 	bl	8005b30 <prvSampleTimeNow>
 8005c22:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	f200 808e 	bhi.w	8005d4a <prvProcessReceivedCommands+0x156>
 8005c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <prvProcessReceivedCommands+0x40>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c59 	.word	0x08005c59
 8005c3c:	08005cc1 	.word	0x08005cc1
 8005c40:	08005cd5 	.word	0x08005cd5
 8005c44:	08005d21 	.word	0x08005d21
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c59 	.word	0x08005c59
 8005c50:	08005cc1 	.word	0x08005cc1
 8005c54:	08005cd5 	.word	0x08005cd5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	18d1      	adds	r1, r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	69f8      	ldr	r0, [r7, #28]
 8005c78:	f7ff ff7a 	bl	8005b70 <prvInsertTimerInActiveList>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d065      	beq.n	8005d4e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d009      	beq.n	8005ca4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	4413      	add	r3, r2
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	69f8      	ldr	r0, [r7, #28]
 8005c9e:	f7ff fe6f 	bl	8005980 <prvReloadTimer>
 8005ca2:	e008      	b.n	8005cb6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	69f8      	ldr	r0, [r7, #28]
 8005cbc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005cbe:	e046      	b.n	8005d4e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005cd2:	e03d      	b.n	8005d50 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	617b      	str	r3, [r7, #20]
    }
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	e7fd      	b.n	8005d08 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	18d1      	adds	r1, r2, r3
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	69f8      	ldr	r0, [r7, #28]
 8005d1a:	f7ff ff29 	bl	8005b70 <prvInsertTimerInActiveList>
                        break;
 8005d1e:	e017      	b.n	8005d50 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8005d2e:	69f8      	ldr	r0, [r7, #28]
 8005d30:	f000 fb58 	bl	80063e4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005d34:	e00c      	b.n	8005d50 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005d48:	e002      	b.n	8005d50 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <prvProcessReceivedCommands+0x15c>
                        break;
 8005d4e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d50:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <prvProcessReceivedCommands+0x180>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f107 0108 	add.w	r1, r7, #8
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fb56 	bl	800440c <xQueueReceive>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f47f af4a 	bne.w	8005bfc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3720      	adds	r7, #32
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000718 	.word	0x20000718

08005d78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d7e:	e009      	b.n	8005d94 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d80:	4b0e      	ldr	r3, [pc, #56]	@ (8005dbc <prvSwitchTimerLists+0x44>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8005d8e:	6838      	ldr	r0, [r7, #0]
 8005d90:	f7ff fe18 	bl	80059c4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <prvSwitchTimerLists+0x44>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005d9e:	4b07      	ldr	r3, [pc, #28]	@ (8005dbc <prvSwitchTimerLists+0x44>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005da4:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <prvSwitchTimerLists+0x48>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a04      	ldr	r2, [pc, #16]	@ (8005dbc <prvSwitchTimerLists+0x44>)
 8005daa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005dac:	4a04      	ldr	r2, [pc, #16]	@ (8005dc0 <prvSwitchTimerLists+0x48>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6013      	str	r3, [r2, #0]
    }
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000710 	.word	0x20000710
 8005dc0:	20000714 	.word	0x20000714

08005dc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005dc8:	f000 f968 	bl	800609c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005dcc:	4b12      	ldr	r3, [pc, #72]	@ (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11d      	bne.n	8005e10 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005dd4:	4811      	ldr	r0, [pc, #68]	@ (8005e1c <prvCheckForValidListAndQueue+0x58>)
 8005dd6:	f7fe f883 	bl	8003ee0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005dda:	4811      	ldr	r0, [pc, #68]	@ (8005e20 <prvCheckForValidListAndQueue+0x5c>)
 8005ddc:	f7fe f880 	bl	8003ee0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005de0:	4b10      	ldr	r3, [pc, #64]	@ (8005e24 <prvCheckForValidListAndQueue+0x60>)
 8005de2:	4a0e      	ldr	r2, [pc, #56]	@ (8005e1c <prvCheckForValidListAndQueue+0x58>)
 8005de4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005de6:	4b10      	ldr	r3, [pc, #64]	@ (8005e28 <prvCheckForValidListAndQueue+0x64>)
 8005de8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e20 <prvCheckForValidListAndQueue+0x5c>)
 8005dea:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005dec:	2200      	movs	r2, #0
 8005dee:	210c      	movs	r1, #12
 8005df0:	200a      	movs	r0, #10
 8005df2:	f7fe f997 	bl	8004124 <xQueueGenericCreate>
 8005df6:	4603      	mov	r3, r0
 8005df8:	4a07      	ldr	r2, [pc, #28]	@ (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005dfa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e04:	4b04      	ldr	r3, [pc, #16]	@ (8005e18 <prvCheckForValidListAndQueue+0x54>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4908      	ldr	r1, [pc, #32]	@ (8005e2c <prvCheckForValidListAndQueue+0x68>)
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fcf0 	bl	80047f0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005e10:	f000 f976 	bl	8006100 <vPortExitCritical>
    }
 8005e14:	bf00      	nop
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000718 	.word	0x20000718
 8005e1c:	200006e8 	.word	0x200006e8
 8005e20:	200006fc 	.word	0x200006fc
 8005e24:	20000710 	.word	0x20000710
 8005e28:	20000714 	.word	0x20000714
 8005e2c:	08006fa8 	.word	0x08006fa8

08005e30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3b04      	subs	r3, #4
 8005e40:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3b04      	subs	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005e60:	4a0c      	ldr	r2, [pc, #48]	@ (8005e94 <pxPortInitialiseStack+0x64>)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b14      	subs	r3, #20
 8005e6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b04      	subs	r3, #4
 8005e76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f06f 0202 	mvn.w	r2, #2
 8005e7e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b20      	subs	r3, #32
 8005e84:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005e86:	68fb      	ldr	r3, [r7, #12]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	08005e99 	.word	0x08005e99

08005e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005ea2:	4b13      	ldr	r3, [pc, #76]	@ (8005ef0 <prvTaskExitError+0x58>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d00b      	beq.n	8005ec4 <prvTaskExitError+0x2c>
        __asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	60fb      	str	r3, [r7, #12]
    }
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	e7fd      	b.n	8005ec0 <prvTaskExitError+0x28>
        __asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60bb      	str	r3, [r7, #8]
    }
 8005ed6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005ed8:	bf00      	nop
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0fc      	beq.n	8005eda <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000020 	.word	0x20000020
	...

08005f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005f00:	4b07      	ldr	r3, [pc, #28]	@ (8005f20 <pxCurrentTCBConst2>)
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	6808      	ldr	r0, [r1, #0]
 8005f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	f380 8809 	msr	PSP, r0
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f380 8811 	msr	BASEPRI, r0
 8005f1a:	4770      	bx	lr
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst2>:
 8005f20:	200005e4 	.word	0x200005e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005f28:	4808      	ldr	r0, [pc, #32]	@ (8005f4c <prvPortStartFirstTask+0x24>)
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f380 8808 	msr	MSP, r0
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8814 	msr	CONTROL, r0
 8005f3a:	b662      	cpsie	i
 8005f3c:	b661      	cpsie	f
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	df00      	svc	0
 8005f48:	bf00      	nop
 8005f4a:	0000      	.short	0x0000
 8005f4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop

08005f54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f5a:	4b47      	ldr	r3, [pc, #284]	@ (8006078 <xPortStartScheduler+0x124>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a47      	ldr	r2, [pc, #284]	@ (800607c <xPortStartScheduler+0x128>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d10b      	bne.n	8005f7c <xPortStartScheduler+0x28>
        __asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	613b      	str	r3, [r7, #16]
    }
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	e7fd      	b.n	8005f78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8006078 <xPortStartScheduler+0x124>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a3f      	ldr	r2, [pc, #252]	@ (8006080 <xPortStartScheduler+0x12c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d10b      	bne.n	8005f9e <xPortStartScheduler+0x4a>
        __asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	60fb      	str	r3, [r7, #12]
    }
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f9e:	4b39      	ldr	r3, [pc, #228]	@ (8006084 <xPortStartScheduler+0x130>)
 8005fa0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	22ff      	movs	r2, #255	@ 0xff
 8005fae:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	4b31      	ldr	r3, [pc, #196]	@ (8006088 <xPortStartScheduler+0x134>)
 8005fc4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fc6:	4b31      	ldr	r3, [pc, #196]	@ (800608c <xPortStartScheduler+0x138>)
 8005fc8:	2207      	movs	r2, #7
 8005fca:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fcc:	e009      	b.n	8005fe2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8005fce:	4b2f      	ldr	r3, [pc, #188]	@ (800608c <xPortStartScheduler+0x138>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800608c <xPortStartScheduler+0x138>)
 8005fd6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fea:	2b80      	cmp	r3, #128	@ 0x80
 8005fec:	d0ef      	beq.n	8005fce <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fee:	4b27      	ldr	r3, [pc, #156]	@ (800608c <xPortStartScheduler+0x138>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f1c3 0307 	rsb	r3, r3, #7
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d00b      	beq.n	8006012 <xPortStartScheduler+0xbe>
        __asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
    }
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006012:	4b1e      	ldr	r3, [pc, #120]	@ (800608c <xPortStartScheduler+0x138>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	4a1c      	ldr	r2, [pc, #112]	@ (800608c <xPortStartScheduler+0x138>)
 800601a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800601c:	4b1b      	ldr	r3, [pc, #108]	@ (800608c <xPortStartScheduler+0x138>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006024:	4a19      	ldr	r2, [pc, #100]	@ (800608c <xPortStartScheduler+0x138>)
 8006026:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006030:	4b17      	ldr	r3, [pc, #92]	@ (8006090 <xPortStartScheduler+0x13c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a16      	ldr	r2, [pc, #88]	@ (8006090 <xPortStartScheduler+0x13c>)
 8006036:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800603a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800603c:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <xPortStartScheduler+0x13c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a13      	ldr	r2, [pc, #76]	@ (8006090 <xPortStartScheduler+0x13c>)
 8006042:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006046:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006048:	f000 f8e0 	bl	800620c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800604c:	4b11      	ldr	r3, [pc, #68]	@ (8006094 <xPortStartScheduler+0x140>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006052:	f000 f8ff 	bl	8006254 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006056:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <xPortStartScheduler+0x144>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a0f      	ldr	r2, [pc, #60]	@ (8006098 <xPortStartScheduler+0x144>)
 800605c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006060:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006062:	f7ff ff61 	bl	8005f28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006066:	f7ff f837 	bl	80050d8 <vTaskSwitchContext>
    prvTaskExitError();
 800606a:	f7ff ff15 	bl	8005e98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	e000ed00 	.word	0xe000ed00
 800607c:	410fc271 	.word	0x410fc271
 8006080:	410fc270 	.word	0x410fc270
 8006084:	e000e400 	.word	0xe000e400
 8006088:	20000724 	.word	0x20000724
 800608c:	20000728 	.word	0x20000728
 8006090:	e000ed20 	.word	0xe000ed20
 8006094:	20000020 	.word	0x20000020
 8006098:	e000ef34 	.word	0xe000ef34

0800609c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
        __asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	607b      	str	r3, [r7, #4]
    }
 80060b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80060b6:	4b10      	ldr	r3, [pc, #64]	@ (80060f8 <vPortEnterCritical+0x5c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a0e      	ldr	r2, [pc, #56]	@ (80060f8 <vPortEnterCritical+0x5c>)
 80060be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80060c0:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <vPortEnterCritical+0x5c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d110      	bne.n	80060ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060c8:	4b0c      	ldr	r3, [pc, #48]	@ (80060fc <vPortEnterCritical+0x60>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <vPortEnterCritical+0x4e>
        __asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	603b      	str	r3, [r7, #0]
    }
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	e7fd      	b.n	80060e6 <vPortEnterCritical+0x4a>
    }
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000020 	.word	0x20000020
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006106:	4b12      	ldr	r3, [pc, #72]	@ (8006150 <vPortExitCritical+0x50>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <vPortExitCritical+0x26>
        __asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
    }
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	e7fd      	b.n	8006122 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006126:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <vPortExitCritical+0x50>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a08      	ldr	r2, [pc, #32]	@ (8006150 <vPortExitCritical+0x50>)
 800612e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006130:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <vPortExitCritical+0x50>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d105      	bne.n	8006144 <vPortExitCritical+0x44>
 8006138:	2300      	movs	r3, #0
 800613a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006142:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20000020 	.word	0x20000020
	...

08006160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006160:	f3ef 8009 	mrs	r0, PSP
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <pxCurrentTCBConst>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f01e 0f10 	tst.w	lr, #16
 8006170:	bf08      	it	eq
 8006172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006184:	f380 8811 	msr	BASEPRI, r0
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f7fe ffa2 	bl	80050d8 <vTaskSwitchContext>
 8006194:	f04f 0000 	mov.w	r0, #0
 8006198:	f380 8811 	msr	BASEPRI, r0
 800619c:	bc09      	pop	{r0, r3}
 800619e:	6819      	ldr	r1, [r3, #0]
 80061a0:	6808      	ldr	r0, [r1, #0]
 80061a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a6:	f01e 0f10 	tst.w	lr, #16
 80061aa:	bf08      	it	eq
 80061ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061b0:	f380 8809 	msr	PSP, r0
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst>:
 80061c0:	200005e4 	.word	0x200005e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
        __asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
    }
 80061e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80061e2:	f7fe fe61 	bl	8004ea8 <xTaskIncrementTick>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <SysTick_Handler+0x40>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
    }
 80061fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006210:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006216:	4b0b      	ldr	r3, [pc, #44]	@ (8006244 <vPortSetupTimerInterrupt+0x38>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <vPortSetupTimerInterrupt+0x3c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <vPortSetupTimerInterrupt+0x40>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	4a09      	ldr	r2, [pc, #36]	@ (8006250 <vPortSetupTimerInterrupt+0x44>)
 800622a:	3b01      	subs	r3, #1
 800622c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800622e:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010
 8006244:	e000e018 	.word	0xe000e018
 8006248:	20000010 	.word	0x20000010
 800624c:	10624dd3 	.word	0x10624dd3
 8006250:	e000e014 	.word	0xe000e014

08006254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006264 <vPortEnableVFP+0x10>
 8006258:	6801      	ldr	r1, [r0, #0]
 800625a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800625e:	6001      	str	r1, [r0, #0]
 8006260:	4770      	bx	lr
 8006262:	0000      	.short	0x0000
 8006264:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop

0800626c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	@ 0x28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006278:	f7fe fcfc 	bl	8004c74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800627c:	4b54      	ldr	r3, [pc, #336]	@ (80063d0 <pvPortMalloc+0x164>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006284:	f000 f90c 	bl	80064a0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d012      	beq.n	80062b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800628e:	2208      	movs	r2, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	3308      	adds	r3, #8
 800629a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	43db      	mvns	r3, r3
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d804      	bhi.n	80062b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	4413      	add	r3, r2
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	e001      	b.n	80062b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	db71      	blt.n	800639e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d06e      	beq.n	800639e <pvPortMalloc+0x132>
 80062c0:	4b44      	ldr	r3, [pc, #272]	@ (80063d4 <pvPortMalloc+0x168>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d869      	bhi.n	800639e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80062ca:	4b43      	ldr	r3, [pc, #268]	@ (80063d8 <pvPortMalloc+0x16c>)
 80062cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80062ce:	4b42      	ldr	r3, [pc, #264]	@ (80063d8 <pvPortMalloc+0x16c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062d4:	e004      	b.n	80062e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d903      	bls.n	80062f2 <pvPortMalloc+0x86>
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f1      	bne.n	80062d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80062f2:	4b37      	ldr	r3, [pc, #220]	@ (80063d0 <pvPortMalloc+0x164>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d050      	beq.n	800639e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2208      	movs	r2, #8
 8006302:	4413      	add	r3, r2
 8006304:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1ad2      	subs	r2, r2, r3
 8006316:	2308      	movs	r3, #8
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	429a      	cmp	r2, r3
 800631c:	d920      	bls.n	8006360 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800631e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <pvPortMalloc+0xdc>
        __asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
    }
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	e7fd      	b.n	8006344 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800635a:	6978      	ldr	r0, [r7, #20]
 800635c:	f000 f8fc 	bl	8006558 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006360:	4b1c      	ldr	r3, [pc, #112]	@ (80063d4 <pvPortMalloc+0x168>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	4a1a      	ldr	r2, [pc, #104]	@ (80063d4 <pvPortMalloc+0x168>)
 800636c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800636e:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <pvPortMalloc+0x168>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b1a      	ldr	r3, [pc, #104]	@ (80063dc <pvPortMalloc+0x170>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d203      	bcs.n	8006382 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800637a:	4b16      	ldr	r3, [pc, #88]	@ (80063d4 <pvPortMalloc+0x168>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a17      	ldr	r2, [pc, #92]	@ (80063dc <pvPortMalloc+0x170>)
 8006380:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006394:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <pvPortMalloc+0x174>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a11      	ldr	r2, [pc, #68]	@ (80063e0 <pvPortMalloc+0x174>)
 800639c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800639e:	f7fe fc77 	bl	8004c90 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00b      	beq.n	80063c4 <pvPortMalloc+0x158>
        __asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
    }
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <pvPortMalloc+0x154>
    return pvReturn;
 80063c4:	69fb      	ldr	r3, [r7, #28]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	@ 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000f734 	.word	0x2000f734
 80063d4:	2000f738 	.word	0x2000f738
 80063d8:	2000f72c 	.word	0x2000f72c
 80063dc:	2000f73c 	.word	0x2000f73c
 80063e0:	2000f740 	.word	0x2000f740

080063e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d04b      	beq.n	800648e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80063f6:	2308      	movs	r3, #8
 80063f8:	425b      	negs	r3, r3
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4413      	add	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	db0b      	blt.n	8006424 <vPortFree+0x40>
        __asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
    }
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <vPortFree+0x60>
        __asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	60bb      	str	r3, [r7, #8]
    }
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	0fdb      	lsrs	r3, r3, #31
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01c      	beq.n	800648e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d118      	bne.n	800648e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006468:	f7fe fc04 	bl	8004c74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	4b09      	ldr	r3, [pc, #36]	@ (8006498 <vPortFree+0xb4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4413      	add	r3, r2
 8006476:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <vPortFree+0xb4>)
 8006478:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800647a:	6938      	ldr	r0, [r7, #16]
 800647c:	f000 f86c 	bl	8006558 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006480:	4b06      	ldr	r3, [pc, #24]	@ (800649c <vPortFree+0xb8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	4a05      	ldr	r2, [pc, #20]	@ (800649c <vPortFree+0xb8>)
 8006488:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800648a:	f7fe fc01 	bl	8004c90 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800648e:	bf00      	nop
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2000f738 	.word	0x2000f738
 800649c:	2000f744 	.word	0x2000f744

080064a0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064a6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80064aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80064ac:	4b25      	ldr	r3, [pc, #148]	@ (8006544 <prvHeapInit+0xa4>)
 80064ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00c      	beq.n	80064d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3307      	adds	r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0307 	bic.w	r3, r3, #7
 80064c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006544 <prvHeapInit+0xa4>)
 80064d0:	4413      	add	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006548 <prvHeapInit+0xa8>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80064de:	4b1a      	ldr	r3, [pc, #104]	@ (8006548 <prvHeapInit+0xa8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80064ec:	2208      	movs	r2, #8
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0307 	bic.w	r3, r3, #7
 80064fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a13      	ldr	r2, [pc, #76]	@ (800654c <prvHeapInit+0xac>)
 8006500:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006502:	4b12      	ldr	r3, [pc, #72]	@ (800654c <prvHeapInit+0xac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800650a:	4b10      	ldr	r3, [pc, #64]	@ (800654c <prvHeapInit+0xac>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006520:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <prvHeapInit+0xac>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a08      	ldr	r2, [pc, #32]	@ (8006550 <prvHeapInit+0xb0>)
 800652e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4a07      	ldr	r2, [pc, #28]	@ (8006554 <prvHeapInit+0xb4>)
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	2000072c 	.word	0x2000072c
 8006548:	2000f72c 	.word	0x2000f72c
 800654c:	2000f734 	.word	0x2000f734
 8006550:	2000f73c 	.word	0x2000f73c
 8006554:	2000f738 	.word	0x2000f738

08006558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006560:	4b28      	ldr	r3, [pc, #160]	@ (8006604 <prvInsertBlockIntoFreeList+0xac>)
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e002      	b.n	800656c <prvInsertBlockIntoFreeList+0x14>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d8f7      	bhi.n	8006566 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	4413      	add	r3, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d108      	bne.n	800659a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	441a      	add	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	441a      	add	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d118      	bne.n	80065e0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b15      	ldr	r3, [pc, #84]	@ (8006608 <prvInsertBlockIntoFreeList+0xb0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d00d      	beq.n	80065d6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	441a      	add	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e008      	b.n	80065e8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006608 <prvInsertBlockIntoFreeList+0xb0>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e003      	b.n	80065e8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d002      	beq.n	80065f6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	2000f72c 	.word	0x2000f72c
 8006608:	2000f734 	.word	0x2000f734

0800660c <siprintf>:
 800660c:	b40e      	push	{r1, r2, r3}
 800660e:	b500      	push	{lr}
 8006610:	b09c      	sub	sp, #112	@ 0x70
 8006612:	ab1d      	add	r3, sp, #116	@ 0x74
 8006614:	9002      	str	r0, [sp, #8]
 8006616:	9006      	str	r0, [sp, #24]
 8006618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800661c:	4809      	ldr	r0, [pc, #36]	@ (8006644 <siprintf+0x38>)
 800661e:	9107      	str	r1, [sp, #28]
 8006620:	9104      	str	r1, [sp, #16]
 8006622:	4909      	ldr	r1, [pc, #36]	@ (8006648 <siprintf+0x3c>)
 8006624:	f853 2b04 	ldr.w	r2, [r3], #4
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	a902      	add	r1, sp, #8
 8006630:	f000 f99c 	bl	800696c <_svfiprintf_r>
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	b01c      	add	sp, #112	@ 0x70
 800663c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006640:	b003      	add	sp, #12
 8006642:	4770      	bx	lr
 8006644:	20000024 	.word	0x20000024
 8006648:	ffff0208 	.word	0xffff0208

0800664c <memset>:
 800664c:	4402      	add	r2, r0
 800664e:	4603      	mov	r3, r0
 8006650:	4293      	cmp	r3, r2
 8006652:	d100      	bne.n	8006656 <memset+0xa>
 8006654:	4770      	bx	lr
 8006656:	f803 1b01 	strb.w	r1, [r3], #1
 800665a:	e7f9      	b.n	8006650 <memset+0x4>

0800665c <__libc_init_array>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	4d0d      	ldr	r5, [pc, #52]	@ (8006694 <__libc_init_array+0x38>)
 8006660:	4c0d      	ldr	r4, [pc, #52]	@ (8006698 <__libc_init_array+0x3c>)
 8006662:	1b64      	subs	r4, r4, r5
 8006664:	10a4      	asrs	r4, r4, #2
 8006666:	2600      	movs	r6, #0
 8006668:	42a6      	cmp	r6, r4
 800666a:	d109      	bne.n	8006680 <__libc_init_array+0x24>
 800666c:	4d0b      	ldr	r5, [pc, #44]	@ (800669c <__libc_init_array+0x40>)
 800666e:	4c0c      	ldr	r4, [pc, #48]	@ (80066a0 <__libc_init_array+0x44>)
 8006670:	f000 fc74 	bl	8006f5c <_init>
 8006674:	1b64      	subs	r4, r4, r5
 8006676:	10a4      	asrs	r4, r4, #2
 8006678:	2600      	movs	r6, #0
 800667a:	42a6      	cmp	r6, r4
 800667c:	d105      	bne.n	800668a <__libc_init_array+0x2e>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f855 3b04 	ldr.w	r3, [r5], #4
 8006684:	4798      	blx	r3
 8006686:	3601      	adds	r6, #1
 8006688:	e7ee      	b.n	8006668 <__libc_init_array+0xc>
 800668a:	f855 3b04 	ldr.w	r3, [r5], #4
 800668e:	4798      	blx	r3
 8006690:	3601      	adds	r6, #1
 8006692:	e7f2      	b.n	800667a <__libc_init_array+0x1e>
 8006694:	080090ac 	.word	0x080090ac
 8006698:	080090ac 	.word	0x080090ac
 800669c:	080090ac 	.word	0x080090ac
 80066a0:	080090b0 	.word	0x080090b0

080066a4 <__retarget_lock_acquire_recursive>:
 80066a4:	4770      	bx	lr

080066a6 <__retarget_lock_release_recursive>:
 80066a6:	4770      	bx	lr

080066a8 <memcpy>:
 80066a8:	440a      	add	r2, r1
 80066aa:	4291      	cmp	r1, r2
 80066ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b0:	d100      	bne.n	80066b4 <memcpy+0xc>
 80066b2:	4770      	bx	lr
 80066b4:	b510      	push	{r4, lr}
 80066b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066be:	4291      	cmp	r1, r2
 80066c0:	d1f9      	bne.n	80066b6 <memcpy+0xe>
 80066c2:	bd10      	pop	{r4, pc}

080066c4 <_free_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4605      	mov	r5, r0
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d041      	beq.n	8006750 <_free_r+0x8c>
 80066cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d0:	1f0c      	subs	r4, r1, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfb8      	it	lt
 80066d6:	18e4      	addlt	r4, r4, r3
 80066d8:	f000 f8e0 	bl	800689c <__malloc_lock>
 80066dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006754 <_free_r+0x90>)
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	b933      	cbnz	r3, 80066f0 <_free_r+0x2c>
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	6014      	str	r4, [r2, #0]
 80066e6:	4628      	mov	r0, r5
 80066e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ec:	f000 b8dc 	b.w	80068a8 <__malloc_unlock>
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d908      	bls.n	8006706 <_free_r+0x42>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	1821      	adds	r1, r4, r0
 80066f8:	428b      	cmp	r3, r1
 80066fa:	bf01      	itttt	eq
 80066fc:	6819      	ldreq	r1, [r3, #0]
 80066fe:	685b      	ldreq	r3, [r3, #4]
 8006700:	1809      	addeq	r1, r1, r0
 8006702:	6021      	streq	r1, [r4, #0]
 8006704:	e7ed      	b.n	80066e2 <_free_r+0x1e>
 8006706:	461a      	mov	r2, r3
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	b10b      	cbz	r3, 8006710 <_free_r+0x4c>
 800670c:	42a3      	cmp	r3, r4
 800670e:	d9fa      	bls.n	8006706 <_free_r+0x42>
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	1850      	adds	r0, r2, r1
 8006714:	42a0      	cmp	r0, r4
 8006716:	d10b      	bne.n	8006730 <_free_r+0x6c>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	4401      	add	r1, r0
 800671c:	1850      	adds	r0, r2, r1
 800671e:	4283      	cmp	r3, r0
 8006720:	6011      	str	r1, [r2, #0]
 8006722:	d1e0      	bne.n	80066e6 <_free_r+0x22>
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	6053      	str	r3, [r2, #4]
 800672a:	4408      	add	r0, r1
 800672c:	6010      	str	r0, [r2, #0]
 800672e:	e7da      	b.n	80066e6 <_free_r+0x22>
 8006730:	d902      	bls.n	8006738 <_free_r+0x74>
 8006732:	230c      	movs	r3, #12
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	e7d6      	b.n	80066e6 <_free_r+0x22>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428b      	cmp	r3, r1
 800673e:	bf04      	itt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	bf04      	itt	eq
 8006748:	1809      	addeq	r1, r1, r0
 800674a:	6021      	streq	r1, [r4, #0]
 800674c:	6054      	str	r4, [r2, #4]
 800674e:	e7ca      	b.n	80066e6 <_free_r+0x22>
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	2000f88c 	.word	0x2000f88c

08006758 <sbrk_aligned>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4e0f      	ldr	r6, [pc, #60]	@ (8006798 <sbrk_aligned+0x40>)
 800675c:	460c      	mov	r4, r1
 800675e:	6831      	ldr	r1, [r6, #0]
 8006760:	4605      	mov	r5, r0
 8006762:	b911      	cbnz	r1, 800676a <sbrk_aligned+0x12>
 8006764:	f000 fba6 	bl	8006eb4 <_sbrk_r>
 8006768:	6030      	str	r0, [r6, #0]
 800676a:	4621      	mov	r1, r4
 800676c:	4628      	mov	r0, r5
 800676e:	f000 fba1 	bl	8006eb4 <_sbrk_r>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d103      	bne.n	800677e <sbrk_aligned+0x26>
 8006776:	f04f 34ff 	mov.w	r4, #4294967295
 800677a:	4620      	mov	r0, r4
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	1cc4      	adds	r4, r0, #3
 8006780:	f024 0403 	bic.w	r4, r4, #3
 8006784:	42a0      	cmp	r0, r4
 8006786:	d0f8      	beq.n	800677a <sbrk_aligned+0x22>
 8006788:	1a21      	subs	r1, r4, r0
 800678a:	4628      	mov	r0, r5
 800678c:	f000 fb92 	bl	8006eb4 <_sbrk_r>
 8006790:	3001      	adds	r0, #1
 8006792:	d1f2      	bne.n	800677a <sbrk_aligned+0x22>
 8006794:	e7ef      	b.n	8006776 <sbrk_aligned+0x1e>
 8006796:	bf00      	nop
 8006798:	2000f888 	.word	0x2000f888

0800679c <_malloc_r>:
 800679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a0:	1ccd      	adds	r5, r1, #3
 80067a2:	f025 0503 	bic.w	r5, r5, #3
 80067a6:	3508      	adds	r5, #8
 80067a8:	2d0c      	cmp	r5, #12
 80067aa:	bf38      	it	cc
 80067ac:	250c      	movcc	r5, #12
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	4606      	mov	r6, r0
 80067b2:	db01      	blt.n	80067b8 <_malloc_r+0x1c>
 80067b4:	42a9      	cmp	r1, r5
 80067b6:	d904      	bls.n	80067c2 <_malloc_r+0x26>
 80067b8:	230c      	movs	r3, #12
 80067ba:	6033      	str	r3, [r6, #0]
 80067bc:	2000      	movs	r0, #0
 80067be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006898 <_malloc_r+0xfc>
 80067c6:	f000 f869 	bl	800689c <__malloc_lock>
 80067ca:	f8d8 3000 	ldr.w	r3, [r8]
 80067ce:	461c      	mov	r4, r3
 80067d0:	bb44      	cbnz	r4, 8006824 <_malloc_r+0x88>
 80067d2:	4629      	mov	r1, r5
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff ffbf 	bl	8006758 <sbrk_aligned>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	4604      	mov	r4, r0
 80067de:	d158      	bne.n	8006892 <_malloc_r+0xf6>
 80067e0:	f8d8 4000 	ldr.w	r4, [r8]
 80067e4:	4627      	mov	r7, r4
 80067e6:	2f00      	cmp	r7, #0
 80067e8:	d143      	bne.n	8006872 <_malloc_r+0xd6>
 80067ea:	2c00      	cmp	r4, #0
 80067ec:	d04b      	beq.n	8006886 <_malloc_r+0xea>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	4639      	mov	r1, r7
 80067f2:	4630      	mov	r0, r6
 80067f4:	eb04 0903 	add.w	r9, r4, r3
 80067f8:	f000 fb5c 	bl	8006eb4 <_sbrk_r>
 80067fc:	4581      	cmp	r9, r0
 80067fe:	d142      	bne.n	8006886 <_malloc_r+0xea>
 8006800:	6821      	ldr	r1, [r4, #0]
 8006802:	1a6d      	subs	r5, r5, r1
 8006804:	4629      	mov	r1, r5
 8006806:	4630      	mov	r0, r6
 8006808:	f7ff ffa6 	bl	8006758 <sbrk_aligned>
 800680c:	3001      	adds	r0, #1
 800680e:	d03a      	beq.n	8006886 <_malloc_r+0xea>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	442b      	add	r3, r5
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	f8d8 3000 	ldr.w	r3, [r8]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	bb62      	cbnz	r2, 8006878 <_malloc_r+0xdc>
 800681e:	f8c8 7000 	str.w	r7, [r8]
 8006822:	e00f      	b.n	8006844 <_malloc_r+0xa8>
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	1b52      	subs	r2, r2, r5
 8006828:	d420      	bmi.n	800686c <_malloc_r+0xd0>
 800682a:	2a0b      	cmp	r2, #11
 800682c:	d917      	bls.n	800685e <_malloc_r+0xc2>
 800682e:	1961      	adds	r1, r4, r5
 8006830:	42a3      	cmp	r3, r4
 8006832:	6025      	str	r5, [r4, #0]
 8006834:	bf18      	it	ne
 8006836:	6059      	strne	r1, [r3, #4]
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	bf08      	it	eq
 800683c:	f8c8 1000 	streq.w	r1, [r8]
 8006840:	5162      	str	r2, [r4, r5]
 8006842:	604b      	str	r3, [r1, #4]
 8006844:	4630      	mov	r0, r6
 8006846:	f000 f82f 	bl	80068a8 <__malloc_unlock>
 800684a:	f104 000b 	add.w	r0, r4, #11
 800684e:	1d23      	adds	r3, r4, #4
 8006850:	f020 0007 	bic.w	r0, r0, #7
 8006854:	1ac2      	subs	r2, r0, r3
 8006856:	bf1c      	itt	ne
 8006858:	1a1b      	subne	r3, r3, r0
 800685a:	50a3      	strne	r3, [r4, r2]
 800685c:	e7af      	b.n	80067be <_malloc_r+0x22>
 800685e:	6862      	ldr	r2, [r4, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	bf0c      	ite	eq
 8006864:	f8c8 2000 	streq.w	r2, [r8]
 8006868:	605a      	strne	r2, [r3, #4]
 800686a:	e7eb      	b.n	8006844 <_malloc_r+0xa8>
 800686c:	4623      	mov	r3, r4
 800686e:	6864      	ldr	r4, [r4, #4]
 8006870:	e7ae      	b.n	80067d0 <_malloc_r+0x34>
 8006872:	463c      	mov	r4, r7
 8006874:	687f      	ldr	r7, [r7, #4]
 8006876:	e7b6      	b.n	80067e6 <_malloc_r+0x4a>
 8006878:	461a      	mov	r2, r3
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	42a3      	cmp	r3, r4
 800687e:	d1fb      	bne.n	8006878 <_malloc_r+0xdc>
 8006880:	2300      	movs	r3, #0
 8006882:	6053      	str	r3, [r2, #4]
 8006884:	e7de      	b.n	8006844 <_malloc_r+0xa8>
 8006886:	230c      	movs	r3, #12
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	4630      	mov	r0, r6
 800688c:	f000 f80c 	bl	80068a8 <__malloc_unlock>
 8006890:	e794      	b.n	80067bc <_malloc_r+0x20>
 8006892:	6005      	str	r5, [r0, #0]
 8006894:	e7d6      	b.n	8006844 <_malloc_r+0xa8>
 8006896:	bf00      	nop
 8006898:	2000f88c 	.word	0x2000f88c

0800689c <__malloc_lock>:
 800689c:	4801      	ldr	r0, [pc, #4]	@ (80068a4 <__malloc_lock+0x8>)
 800689e:	f7ff bf01 	b.w	80066a4 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	2000f884 	.word	0x2000f884

080068a8 <__malloc_unlock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	@ (80068b0 <__malloc_unlock+0x8>)
 80068aa:	f7ff befc 	b.w	80066a6 <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	2000f884 	.word	0x2000f884

080068b4 <__ssputs_r>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	688e      	ldr	r6, [r1, #8]
 80068ba:	461f      	mov	r7, r3
 80068bc:	42be      	cmp	r6, r7
 80068be:	680b      	ldr	r3, [r1, #0]
 80068c0:	4682      	mov	sl, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4690      	mov	r8, r2
 80068c6:	d82d      	bhi.n	8006924 <__ssputs_r+0x70>
 80068c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068d0:	d026      	beq.n	8006920 <__ssputs_r+0x6c>
 80068d2:	6965      	ldr	r5, [r4, #20]
 80068d4:	6909      	ldr	r1, [r1, #16]
 80068d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068da:	eba3 0901 	sub.w	r9, r3, r1
 80068de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068e2:	1c7b      	adds	r3, r7, #1
 80068e4:	444b      	add	r3, r9
 80068e6:	106d      	asrs	r5, r5, #1
 80068e8:	429d      	cmp	r5, r3
 80068ea:	bf38      	it	cc
 80068ec:	461d      	movcc	r5, r3
 80068ee:	0553      	lsls	r3, r2, #21
 80068f0:	d527      	bpl.n	8006942 <__ssputs_r+0x8e>
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7ff ff52 	bl	800679c <_malloc_r>
 80068f8:	4606      	mov	r6, r0
 80068fa:	b360      	cbz	r0, 8006956 <__ssputs_r+0xa2>
 80068fc:	6921      	ldr	r1, [r4, #16]
 80068fe:	464a      	mov	r2, r9
 8006900:	f7ff fed2 	bl	80066a8 <memcpy>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800690a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	6126      	str	r6, [r4, #16]
 8006912:	6165      	str	r5, [r4, #20]
 8006914:	444e      	add	r6, r9
 8006916:	eba5 0509 	sub.w	r5, r5, r9
 800691a:	6026      	str	r6, [r4, #0]
 800691c:	60a5      	str	r5, [r4, #8]
 800691e:	463e      	mov	r6, r7
 8006920:	42be      	cmp	r6, r7
 8006922:	d900      	bls.n	8006926 <__ssputs_r+0x72>
 8006924:	463e      	mov	r6, r7
 8006926:	6820      	ldr	r0, [r4, #0]
 8006928:	4632      	mov	r2, r6
 800692a:	4641      	mov	r1, r8
 800692c:	f000 faa8 	bl	8006e80 <memmove>
 8006930:	68a3      	ldr	r3, [r4, #8]
 8006932:	1b9b      	subs	r3, r3, r6
 8006934:	60a3      	str	r3, [r4, #8]
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	4433      	add	r3, r6
 800693a:	6023      	str	r3, [r4, #0]
 800693c:	2000      	movs	r0, #0
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	462a      	mov	r2, r5
 8006944:	f000 fac6 	bl	8006ed4 <_realloc_r>
 8006948:	4606      	mov	r6, r0
 800694a:	2800      	cmp	r0, #0
 800694c:	d1e0      	bne.n	8006910 <__ssputs_r+0x5c>
 800694e:	6921      	ldr	r1, [r4, #16]
 8006950:	4650      	mov	r0, sl
 8006952:	f7ff feb7 	bl	80066c4 <_free_r>
 8006956:	230c      	movs	r3, #12
 8006958:	f8ca 3000 	str.w	r3, [sl]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	e7e9      	b.n	800693e <__ssputs_r+0x8a>
	...

0800696c <_svfiprintf_r>:
 800696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006970:	4698      	mov	r8, r3
 8006972:	898b      	ldrh	r3, [r1, #12]
 8006974:	061b      	lsls	r3, r3, #24
 8006976:	b09d      	sub	sp, #116	@ 0x74
 8006978:	4607      	mov	r7, r0
 800697a:	460d      	mov	r5, r1
 800697c:	4614      	mov	r4, r2
 800697e:	d510      	bpl.n	80069a2 <_svfiprintf_r+0x36>
 8006980:	690b      	ldr	r3, [r1, #16]
 8006982:	b973      	cbnz	r3, 80069a2 <_svfiprintf_r+0x36>
 8006984:	2140      	movs	r1, #64	@ 0x40
 8006986:	f7ff ff09 	bl	800679c <_malloc_r>
 800698a:	6028      	str	r0, [r5, #0]
 800698c:	6128      	str	r0, [r5, #16]
 800698e:	b930      	cbnz	r0, 800699e <_svfiprintf_r+0x32>
 8006990:	230c      	movs	r3, #12
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	b01d      	add	sp, #116	@ 0x74
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	2340      	movs	r3, #64	@ 0x40
 80069a0:	616b      	str	r3, [r5, #20]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069a6:	2320      	movs	r3, #32
 80069a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80069b0:	2330      	movs	r3, #48	@ 0x30
 80069b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b50 <_svfiprintf_r+0x1e4>
 80069b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069ba:	f04f 0901 	mov.w	r9, #1
 80069be:	4623      	mov	r3, r4
 80069c0:	469a      	mov	sl, r3
 80069c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069c6:	b10a      	cbz	r2, 80069cc <_svfiprintf_r+0x60>
 80069c8:	2a25      	cmp	r2, #37	@ 0x25
 80069ca:	d1f9      	bne.n	80069c0 <_svfiprintf_r+0x54>
 80069cc:	ebba 0b04 	subs.w	fp, sl, r4
 80069d0:	d00b      	beq.n	80069ea <_svfiprintf_r+0x7e>
 80069d2:	465b      	mov	r3, fp
 80069d4:	4622      	mov	r2, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	4638      	mov	r0, r7
 80069da:	f7ff ff6b 	bl	80068b4 <__ssputs_r>
 80069de:	3001      	adds	r0, #1
 80069e0:	f000 80a7 	beq.w	8006b32 <_svfiprintf_r+0x1c6>
 80069e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069e6:	445a      	add	r2, fp
 80069e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80069ea:	f89a 3000 	ldrb.w	r3, [sl]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 809f 	beq.w	8006b32 <_svfiprintf_r+0x1c6>
 80069f4:	2300      	movs	r3, #0
 80069f6:	f04f 32ff 	mov.w	r2, #4294967295
 80069fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069fe:	f10a 0a01 	add.w	sl, sl, #1
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	9307      	str	r3, [sp, #28]
 8006a06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a0c:	4654      	mov	r4, sl
 8006a0e:	2205      	movs	r2, #5
 8006a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a14:	484e      	ldr	r0, [pc, #312]	@ (8006b50 <_svfiprintf_r+0x1e4>)
 8006a16:	f7f9 fbe3 	bl	80001e0 <memchr>
 8006a1a:	9a04      	ldr	r2, [sp, #16]
 8006a1c:	b9d8      	cbnz	r0, 8006a56 <_svfiprintf_r+0xea>
 8006a1e:	06d0      	lsls	r0, r2, #27
 8006a20:	bf44      	itt	mi
 8006a22:	2320      	movmi	r3, #32
 8006a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a28:	0711      	lsls	r1, r2, #28
 8006a2a:	bf44      	itt	mi
 8006a2c:	232b      	movmi	r3, #43	@ 0x2b
 8006a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a32:	f89a 3000 	ldrb.w	r3, [sl]
 8006a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a38:	d015      	beq.n	8006a66 <_svfiprintf_r+0xfa>
 8006a3a:	9a07      	ldr	r2, [sp, #28]
 8006a3c:	4654      	mov	r4, sl
 8006a3e:	2000      	movs	r0, #0
 8006a40:	f04f 0c0a 	mov.w	ip, #10
 8006a44:	4621      	mov	r1, r4
 8006a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a4a:	3b30      	subs	r3, #48	@ 0x30
 8006a4c:	2b09      	cmp	r3, #9
 8006a4e:	d94b      	bls.n	8006ae8 <_svfiprintf_r+0x17c>
 8006a50:	b1b0      	cbz	r0, 8006a80 <_svfiprintf_r+0x114>
 8006a52:	9207      	str	r2, [sp, #28]
 8006a54:	e014      	b.n	8006a80 <_svfiprintf_r+0x114>
 8006a56:	eba0 0308 	sub.w	r3, r0, r8
 8006a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	46a2      	mov	sl, r4
 8006a64:	e7d2      	b.n	8006a0c <_svfiprintf_r+0xa0>
 8006a66:	9b03      	ldr	r3, [sp, #12]
 8006a68:	1d19      	adds	r1, r3, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	9103      	str	r1, [sp, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfbb      	ittet	lt
 8006a72:	425b      	neglt	r3, r3
 8006a74:	f042 0202 	orrlt.w	r2, r2, #2
 8006a78:	9307      	strge	r3, [sp, #28]
 8006a7a:	9307      	strlt	r3, [sp, #28]
 8006a7c:	bfb8      	it	lt
 8006a7e:	9204      	strlt	r2, [sp, #16]
 8006a80:	7823      	ldrb	r3, [r4, #0]
 8006a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a84:	d10a      	bne.n	8006a9c <_svfiprintf_r+0x130>
 8006a86:	7863      	ldrb	r3, [r4, #1]
 8006a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a8a:	d132      	bne.n	8006af2 <_svfiprintf_r+0x186>
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	9203      	str	r2, [sp, #12]
 8006a94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a98:	3402      	adds	r4, #2
 8006a9a:	9305      	str	r3, [sp, #20]
 8006a9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b60 <_svfiprintf_r+0x1f4>
 8006aa0:	7821      	ldrb	r1, [r4, #0]
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	4650      	mov	r0, sl
 8006aa6:	f7f9 fb9b 	bl	80001e0 <memchr>
 8006aaa:	b138      	cbz	r0, 8006abc <_svfiprintf_r+0x150>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	eba0 000a 	sub.w	r0, r0, sl
 8006ab2:	2240      	movs	r2, #64	@ 0x40
 8006ab4:	4082      	lsls	r2, r0
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	3401      	adds	r4, #1
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	4824      	ldr	r0, [pc, #144]	@ (8006b54 <_svfiprintf_r+0x1e8>)
 8006ac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ac6:	2206      	movs	r2, #6
 8006ac8:	f7f9 fb8a 	bl	80001e0 <memchr>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d036      	beq.n	8006b3e <_svfiprintf_r+0x1d2>
 8006ad0:	4b21      	ldr	r3, [pc, #132]	@ (8006b58 <_svfiprintf_r+0x1ec>)
 8006ad2:	bb1b      	cbnz	r3, 8006b1c <_svfiprintf_r+0x1b0>
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	3308      	adds	r3, #8
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae2:	4433      	add	r3, r6
 8006ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ae6:	e76a      	b.n	80069be <_svfiprintf_r+0x52>
 8006ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aec:	460c      	mov	r4, r1
 8006aee:	2001      	movs	r0, #1
 8006af0:	e7a8      	b.n	8006a44 <_svfiprintf_r+0xd8>
 8006af2:	2300      	movs	r3, #0
 8006af4:	3401      	adds	r4, #1
 8006af6:	9305      	str	r3, [sp, #20]
 8006af8:	4619      	mov	r1, r3
 8006afa:	f04f 0c0a 	mov.w	ip, #10
 8006afe:	4620      	mov	r0, r4
 8006b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b04:	3a30      	subs	r2, #48	@ 0x30
 8006b06:	2a09      	cmp	r2, #9
 8006b08:	d903      	bls.n	8006b12 <_svfiprintf_r+0x1a6>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c6      	beq.n	8006a9c <_svfiprintf_r+0x130>
 8006b0e:	9105      	str	r1, [sp, #20]
 8006b10:	e7c4      	b.n	8006a9c <_svfiprintf_r+0x130>
 8006b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b16:	4604      	mov	r4, r0
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e7f0      	b.n	8006afe <_svfiprintf_r+0x192>
 8006b1c:	ab03      	add	r3, sp, #12
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	462a      	mov	r2, r5
 8006b22:	4b0e      	ldr	r3, [pc, #56]	@ (8006b5c <_svfiprintf_r+0x1f0>)
 8006b24:	a904      	add	r1, sp, #16
 8006b26:	4638      	mov	r0, r7
 8006b28:	f3af 8000 	nop.w
 8006b2c:	1c42      	adds	r2, r0, #1
 8006b2e:	4606      	mov	r6, r0
 8006b30:	d1d6      	bne.n	8006ae0 <_svfiprintf_r+0x174>
 8006b32:	89ab      	ldrh	r3, [r5, #12]
 8006b34:	065b      	lsls	r3, r3, #25
 8006b36:	f53f af2d 	bmi.w	8006994 <_svfiprintf_r+0x28>
 8006b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b3c:	e72c      	b.n	8006998 <_svfiprintf_r+0x2c>
 8006b3e:	ab03      	add	r3, sp, #12
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	462a      	mov	r2, r5
 8006b44:	4b05      	ldr	r3, [pc, #20]	@ (8006b5c <_svfiprintf_r+0x1f0>)
 8006b46:	a904      	add	r1, sp, #16
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f000 f879 	bl	8006c40 <_printf_i>
 8006b4e:	e7ed      	b.n	8006b2c <_svfiprintf_r+0x1c0>
 8006b50:	08009070 	.word	0x08009070
 8006b54:	0800907a 	.word	0x0800907a
 8006b58:	00000000 	.word	0x00000000
 8006b5c:	080068b5 	.word	0x080068b5
 8006b60:	08009076 	.word	0x08009076

08006b64 <_printf_common>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	4616      	mov	r6, r2
 8006b6a:	4698      	mov	r8, r3
 8006b6c:	688a      	ldr	r2, [r1, #8]
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	bfb8      	it	lt
 8006b78:	4613      	movlt	r3, r2
 8006b7a:	6033      	str	r3, [r6, #0]
 8006b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b80:	4607      	mov	r7, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	b10a      	cbz	r2, 8006b8a <_printf_common+0x26>
 8006b86:	3301      	adds	r3, #1
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	0699      	lsls	r1, r3, #26
 8006b8e:	bf42      	ittt	mi
 8006b90:	6833      	ldrmi	r3, [r6, #0]
 8006b92:	3302      	addmi	r3, #2
 8006b94:	6033      	strmi	r3, [r6, #0]
 8006b96:	6825      	ldr	r5, [r4, #0]
 8006b98:	f015 0506 	ands.w	r5, r5, #6
 8006b9c:	d106      	bne.n	8006bac <_printf_common+0x48>
 8006b9e:	f104 0a19 	add.w	sl, r4, #25
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	6832      	ldr	r2, [r6, #0]
 8006ba6:	1a9b      	subs	r3, r3, r2
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dc26      	bgt.n	8006bfa <_printf_common+0x96>
 8006bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	3b00      	subs	r3, #0
 8006bb4:	bf18      	it	ne
 8006bb6:	2301      	movne	r3, #1
 8006bb8:	0692      	lsls	r2, r2, #26
 8006bba:	d42b      	bmi.n	8006c14 <_printf_common+0xb0>
 8006bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c8      	blx	r9
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d01e      	beq.n	8006c08 <_printf_common+0xa4>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	6922      	ldr	r2, [r4, #16]
 8006bce:	f003 0306 	and.w	r3, r3, #6
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	bf02      	ittt	eq
 8006bd6:	68e5      	ldreq	r5, [r4, #12]
 8006bd8:	6833      	ldreq	r3, [r6, #0]
 8006bda:	1aed      	subeq	r5, r5, r3
 8006bdc:	68a3      	ldr	r3, [r4, #8]
 8006bde:	bf0c      	ite	eq
 8006be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be4:	2500      	movne	r5, #0
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bfc4      	itt	gt
 8006bea:	1a9b      	subgt	r3, r3, r2
 8006bec:	18ed      	addgt	r5, r5, r3
 8006bee:	2600      	movs	r6, #0
 8006bf0:	341a      	adds	r4, #26
 8006bf2:	42b5      	cmp	r5, r6
 8006bf4:	d11a      	bne.n	8006c2c <_printf_common+0xc8>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e008      	b.n	8006c0c <_printf_common+0xa8>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4641      	mov	r1, r8
 8006c00:	4638      	mov	r0, r7
 8006c02:	47c8      	blx	r9
 8006c04:	3001      	adds	r0, #1
 8006c06:	d103      	bne.n	8006c10 <_printf_common+0xac>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	3501      	adds	r5, #1
 8006c12:	e7c6      	b.n	8006ba2 <_printf_common+0x3e>
 8006c14:	18e1      	adds	r1, r4, r3
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	2030      	movs	r0, #48	@ 0x30
 8006c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c1e:	4422      	add	r2, r4
 8006c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c28:	3302      	adds	r3, #2
 8006c2a:	e7c7      	b.n	8006bbc <_printf_common+0x58>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4641      	mov	r1, r8
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c8      	blx	r9
 8006c36:	3001      	adds	r0, #1
 8006c38:	d0e6      	beq.n	8006c08 <_printf_common+0xa4>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7d9      	b.n	8006bf2 <_printf_common+0x8e>
	...

08006c40 <_printf_i>:
 8006c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	7e0f      	ldrb	r7, [r1, #24]
 8006c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c48:	2f78      	cmp	r7, #120	@ 0x78
 8006c4a:	4691      	mov	r9, r2
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	469a      	mov	sl, r3
 8006c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c56:	d807      	bhi.n	8006c68 <_printf_i+0x28>
 8006c58:	2f62      	cmp	r7, #98	@ 0x62
 8006c5a:	d80a      	bhi.n	8006c72 <_printf_i+0x32>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	f000 80d2 	beq.w	8006e06 <_printf_i+0x1c6>
 8006c62:	2f58      	cmp	r7, #88	@ 0x58
 8006c64:	f000 80b9 	beq.w	8006dda <_printf_i+0x19a>
 8006c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c70:	e03a      	b.n	8006ce8 <_printf_i+0xa8>
 8006c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c76:	2b15      	cmp	r3, #21
 8006c78:	d8f6      	bhi.n	8006c68 <_printf_i+0x28>
 8006c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c80 <_printf_i+0x40>)
 8006c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c80:	08006cd9 	.word	0x08006cd9
 8006c84:	08006ced 	.word	0x08006ced
 8006c88:	08006c69 	.word	0x08006c69
 8006c8c:	08006c69 	.word	0x08006c69
 8006c90:	08006c69 	.word	0x08006c69
 8006c94:	08006c69 	.word	0x08006c69
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006c69 	.word	0x08006c69
 8006ca0:	08006c69 	.word	0x08006c69
 8006ca4:	08006c69 	.word	0x08006c69
 8006ca8:	08006c69 	.word	0x08006c69
 8006cac:	08006ded 	.word	0x08006ded
 8006cb0:	08006d17 	.word	0x08006d17
 8006cb4:	08006da7 	.word	0x08006da7
 8006cb8:	08006c69 	.word	0x08006c69
 8006cbc:	08006c69 	.word	0x08006c69
 8006cc0:	08006e0f 	.word	0x08006e0f
 8006cc4:	08006c69 	.word	0x08006c69
 8006cc8:	08006d17 	.word	0x08006d17
 8006ccc:	08006c69 	.word	0x08006c69
 8006cd0:	08006c69 	.word	0x08006c69
 8006cd4:	08006daf 	.word	0x08006daf
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6032      	str	r2, [r6, #0]
 8006ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e09d      	b.n	8006e28 <_printf_i+0x1e8>
 8006cec:	6833      	ldr	r3, [r6, #0]
 8006cee:	6820      	ldr	r0, [r4, #0]
 8006cf0:	1d19      	adds	r1, r3, #4
 8006cf2:	6031      	str	r1, [r6, #0]
 8006cf4:	0606      	lsls	r6, r0, #24
 8006cf6:	d501      	bpl.n	8006cfc <_printf_i+0xbc>
 8006cf8:	681d      	ldr	r5, [r3, #0]
 8006cfa:	e003      	b.n	8006d04 <_printf_i+0xc4>
 8006cfc:	0645      	lsls	r5, r0, #25
 8006cfe:	d5fb      	bpl.n	8006cf8 <_printf_i+0xb8>
 8006d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	da03      	bge.n	8006d10 <_printf_i+0xd0>
 8006d08:	232d      	movs	r3, #45	@ 0x2d
 8006d0a:	426d      	negs	r5, r5
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d10:	4859      	ldr	r0, [pc, #356]	@ (8006e78 <_printf_i+0x238>)
 8006d12:	230a      	movs	r3, #10
 8006d14:	e011      	b.n	8006d3a <_printf_i+0xfa>
 8006d16:	6821      	ldr	r1, [r4, #0]
 8006d18:	6833      	ldr	r3, [r6, #0]
 8006d1a:	0608      	lsls	r0, r1, #24
 8006d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d20:	d402      	bmi.n	8006d28 <_printf_i+0xe8>
 8006d22:	0649      	lsls	r1, r1, #25
 8006d24:	bf48      	it	mi
 8006d26:	b2ad      	uxthmi	r5, r5
 8006d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d2a:	4853      	ldr	r0, [pc, #332]	@ (8006e78 <_printf_i+0x238>)
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	bf14      	ite	ne
 8006d30:	230a      	movne	r3, #10
 8006d32:	2308      	moveq	r3, #8
 8006d34:	2100      	movs	r1, #0
 8006d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d3a:	6866      	ldr	r6, [r4, #4]
 8006d3c:	60a6      	str	r6, [r4, #8]
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	bfa2      	ittt	ge
 8006d42:	6821      	ldrge	r1, [r4, #0]
 8006d44:	f021 0104 	bicge.w	r1, r1, #4
 8006d48:	6021      	strge	r1, [r4, #0]
 8006d4a:	b90d      	cbnz	r5, 8006d50 <_printf_i+0x110>
 8006d4c:	2e00      	cmp	r6, #0
 8006d4e:	d04b      	beq.n	8006de8 <_printf_i+0x1a8>
 8006d50:	4616      	mov	r6, r2
 8006d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d56:	fb03 5711 	mls	r7, r3, r1, r5
 8006d5a:	5dc7      	ldrb	r7, [r0, r7]
 8006d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d60:	462f      	mov	r7, r5
 8006d62:	42bb      	cmp	r3, r7
 8006d64:	460d      	mov	r5, r1
 8006d66:	d9f4      	bls.n	8006d52 <_printf_i+0x112>
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d10b      	bne.n	8006d84 <_printf_i+0x144>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	07df      	lsls	r7, r3, #31
 8006d70:	d508      	bpl.n	8006d84 <_printf_i+0x144>
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	4299      	cmp	r1, r3
 8006d78:	bfde      	ittt	le
 8006d7a:	2330      	movle	r3, #48	@ 0x30
 8006d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d84:	1b92      	subs	r2, r2, r6
 8006d86:	6122      	str	r2, [r4, #16]
 8006d88:	f8cd a000 	str.w	sl, [sp]
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	aa03      	add	r2, sp, #12
 8006d90:	4621      	mov	r1, r4
 8006d92:	4640      	mov	r0, r8
 8006d94:	f7ff fee6 	bl	8006b64 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d14a      	bne.n	8006e32 <_printf_i+0x1f2>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	b004      	add	sp, #16
 8006da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f043 0320 	orr.w	r3, r3, #32
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	4833      	ldr	r0, [pc, #204]	@ (8006e7c <_printf_i+0x23c>)
 8006db0:	2778      	movs	r7, #120	@ 0x78
 8006db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	6831      	ldr	r1, [r6, #0]
 8006dba:	061f      	lsls	r7, r3, #24
 8006dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dc0:	d402      	bmi.n	8006dc8 <_printf_i+0x188>
 8006dc2:	065f      	lsls	r7, r3, #25
 8006dc4:	bf48      	it	mi
 8006dc6:	b2ad      	uxthmi	r5, r5
 8006dc8:	6031      	str	r1, [r6, #0]
 8006dca:	07d9      	lsls	r1, r3, #31
 8006dcc:	bf44      	itt	mi
 8006dce:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd2:	6023      	strmi	r3, [r4, #0]
 8006dd4:	b11d      	cbz	r5, 8006dde <_printf_i+0x19e>
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	e7ac      	b.n	8006d34 <_printf_i+0xf4>
 8006dda:	4827      	ldr	r0, [pc, #156]	@ (8006e78 <_printf_i+0x238>)
 8006ddc:	e7e9      	b.n	8006db2 <_printf_i+0x172>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	f023 0320 	bic.w	r3, r3, #32
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	e7f6      	b.n	8006dd6 <_printf_i+0x196>
 8006de8:	4616      	mov	r6, r2
 8006dea:	e7bd      	b.n	8006d68 <_printf_i+0x128>
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	6825      	ldr	r5, [r4, #0]
 8006df0:	6961      	ldr	r1, [r4, #20]
 8006df2:	1d18      	adds	r0, r3, #4
 8006df4:	6030      	str	r0, [r6, #0]
 8006df6:	062e      	lsls	r6, r5, #24
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	d501      	bpl.n	8006e00 <_printf_i+0x1c0>
 8006dfc:	6019      	str	r1, [r3, #0]
 8006dfe:	e002      	b.n	8006e06 <_printf_i+0x1c6>
 8006e00:	0668      	lsls	r0, r5, #25
 8006e02:	d5fb      	bpl.n	8006dfc <_printf_i+0x1bc>
 8006e04:	8019      	strh	r1, [r3, #0]
 8006e06:	2300      	movs	r3, #0
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	4616      	mov	r6, r2
 8006e0c:	e7bc      	b.n	8006d88 <_printf_i+0x148>
 8006e0e:	6833      	ldr	r3, [r6, #0]
 8006e10:	1d1a      	adds	r2, r3, #4
 8006e12:	6032      	str	r2, [r6, #0]
 8006e14:	681e      	ldr	r6, [r3, #0]
 8006e16:	6862      	ldr	r2, [r4, #4]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7f9 f9e0 	bl	80001e0 <memchr>
 8006e20:	b108      	cbz	r0, 8006e26 <_printf_i+0x1e6>
 8006e22:	1b80      	subs	r0, r0, r6
 8006e24:	6060      	str	r0, [r4, #4]
 8006e26:	6863      	ldr	r3, [r4, #4]
 8006e28:	6123      	str	r3, [r4, #16]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e30:	e7aa      	b.n	8006d88 <_printf_i+0x148>
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	4632      	mov	r2, r6
 8006e36:	4649      	mov	r1, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	47d0      	blx	sl
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d0ad      	beq.n	8006d9c <_printf_i+0x15c>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	079b      	lsls	r3, r3, #30
 8006e44:	d413      	bmi.n	8006e6e <_printf_i+0x22e>
 8006e46:	68e0      	ldr	r0, [r4, #12]
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	4298      	cmp	r0, r3
 8006e4c:	bfb8      	it	lt
 8006e4e:	4618      	movlt	r0, r3
 8006e50:	e7a6      	b.n	8006da0 <_printf_i+0x160>
 8006e52:	2301      	movs	r3, #1
 8006e54:	4632      	mov	r2, r6
 8006e56:	4649      	mov	r1, r9
 8006e58:	4640      	mov	r0, r8
 8006e5a:	47d0      	blx	sl
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d09d      	beq.n	8006d9c <_printf_i+0x15c>
 8006e60:	3501      	adds	r5, #1
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	9903      	ldr	r1, [sp, #12]
 8006e66:	1a5b      	subs	r3, r3, r1
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dcf2      	bgt.n	8006e52 <_printf_i+0x212>
 8006e6c:	e7eb      	b.n	8006e46 <_printf_i+0x206>
 8006e6e:	2500      	movs	r5, #0
 8006e70:	f104 0619 	add.w	r6, r4, #25
 8006e74:	e7f5      	b.n	8006e62 <_printf_i+0x222>
 8006e76:	bf00      	nop
 8006e78:	08009081 	.word	0x08009081
 8006e7c:	08009092 	.word	0x08009092

08006e80 <memmove>:
 8006e80:	4288      	cmp	r0, r1
 8006e82:	b510      	push	{r4, lr}
 8006e84:	eb01 0402 	add.w	r4, r1, r2
 8006e88:	d902      	bls.n	8006e90 <memmove+0x10>
 8006e8a:	4284      	cmp	r4, r0
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	d807      	bhi.n	8006ea0 <memmove+0x20>
 8006e90:	1e43      	subs	r3, r0, #1
 8006e92:	42a1      	cmp	r1, r4
 8006e94:	d008      	beq.n	8006ea8 <memmove+0x28>
 8006e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e9e:	e7f8      	b.n	8006e92 <memmove+0x12>
 8006ea0:	4402      	add	r2, r0
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	428a      	cmp	r2, r1
 8006ea6:	d100      	bne.n	8006eaa <memmove+0x2a>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eb2:	e7f7      	b.n	8006ea4 <memmove+0x24>

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d06      	ldr	r5, [pc, #24]	@ (8006ed0 <_sbrk_r+0x1c>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f000 f83e 	bl	8006f40 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	2000f880 	.word	0x2000f880

08006ed4 <_realloc_r>:
 8006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4615      	mov	r5, r2
 8006edc:	460c      	mov	r4, r1
 8006ede:	b921      	cbnz	r1, 8006eea <_realloc_r+0x16>
 8006ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	f7ff bc59 	b.w	800679c <_malloc_r>
 8006eea:	b92a      	cbnz	r2, 8006ef8 <_realloc_r+0x24>
 8006eec:	f7ff fbea 	bl	80066c4 <_free_r>
 8006ef0:	2400      	movs	r4, #0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef8:	f000 f81a 	bl	8006f30 <_malloc_usable_size_r>
 8006efc:	4285      	cmp	r5, r0
 8006efe:	4606      	mov	r6, r0
 8006f00:	d802      	bhi.n	8006f08 <_realloc_r+0x34>
 8006f02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f06:	d8f4      	bhi.n	8006ef2 <_realloc_r+0x1e>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f7ff fc46 	bl	800679c <_malloc_r>
 8006f10:	4607      	mov	r7, r0
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d0ec      	beq.n	8006ef0 <_realloc_r+0x1c>
 8006f16:	42b5      	cmp	r5, r6
 8006f18:	462a      	mov	r2, r5
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	bf28      	it	cs
 8006f1e:	4632      	movcs	r2, r6
 8006f20:	f7ff fbc2 	bl	80066a8 <memcpy>
 8006f24:	4621      	mov	r1, r4
 8006f26:	4640      	mov	r0, r8
 8006f28:	f7ff fbcc 	bl	80066c4 <_free_r>
 8006f2c:	463c      	mov	r4, r7
 8006f2e:	e7e0      	b.n	8006ef2 <_realloc_r+0x1e>

08006f30 <_malloc_usable_size_r>:
 8006f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f34:	1f18      	subs	r0, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bfbc      	itt	lt
 8006f3a:	580b      	ldrlt	r3, [r1, r0]
 8006f3c:	18c0      	addlt	r0, r0, r3
 8006f3e:	4770      	bx	lr

08006f40 <_sbrk>:
 8006f40:	4a04      	ldr	r2, [pc, #16]	@ (8006f54 <_sbrk+0x14>)
 8006f42:	6811      	ldr	r1, [r2, #0]
 8006f44:	4603      	mov	r3, r0
 8006f46:	b909      	cbnz	r1, 8006f4c <_sbrk+0xc>
 8006f48:	4903      	ldr	r1, [pc, #12]	@ (8006f58 <_sbrk+0x18>)
 8006f4a:	6011      	str	r1, [r2, #0]
 8006f4c:	6810      	ldr	r0, [r2, #0]
 8006f4e:	4403      	add	r3, r0
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	4770      	bx	lr
 8006f54:	2000f890 	.word	0x2000f890
 8006f58:	2000f898 	.word	0x2000f898

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
